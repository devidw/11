/* tslint:disable */
/* eslint-disable */
/**
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the \'Profile\' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration.js';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common.js';
import type { RequestArgs } from './base.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base.js';

/**
 * 
 * @export
 * @interface AddProjectResponseModel
 */
export interface AddProjectResponseModel {
    /**
     * 
     * @type {ProjectResponseModel}
     * @memberof AddProjectResponseModel
     */
    'project': ProjectResponseModel;
}
/**
 * 
 * @export
 * @interface AddVoiceResponseModel
 */
export interface AddVoiceResponseModel {
    /**
     * 
     * @type {string}
     * @memberof AddVoiceResponseModel
     */
    'voice_id': string;
}
/**
 * 
 * @export
 * @interface BodyDownloadHistoryItemsV1HistoryDownloadPost
 */
export interface BodyDownloadHistoryItemsV1HistoryDownloadPost {
    /**
     * A list of history items to download, you can get IDs of history items and other metadata using the GET https://api.elevenlabs.io/v1/history endpoint.
     * @type {Array<string>}
     * @memberof BodyDownloadHistoryItemsV1HistoryDownloadPost
     */
    'history_item_ids': Array<string>;
}
/**
 * 
 * @export
 * @interface BodyTextToSpeechV1TextToSpeechVoiceIdPost
 */
export interface BodyTextToSpeechV1TextToSpeechVoiceIdPost {
    /**
     * The text that will get converted into speech.
     * @type {string}
     * @memberof BodyTextToSpeechV1TextToSpeechVoiceIdPost
     */
    'text': string;
    /**
     * Identifier of the model that will be used, you can query them using GET /v1/models.
     * @type {string}
     * @memberof BodyTextToSpeechV1TextToSpeechVoiceIdPost
     */
    'model_id'?: string;
    /**
     * 
     * @type {VoiceSettingsResponseModel}
     * @memberof BodyTextToSpeechV1TextToSpeechVoiceIdPost
     */
    'voice_settings'?: VoiceSettingsResponseModel;
}
/**
 * 
 * @export
 * @interface BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost
 */
export interface BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost {
    /**
     * The text that will get converted into speech.
     * @type {string}
     * @memberof BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost
     */
    'text': string;
    /**
     * Identifier of the model that will be used, you can query them using GET /v1/models.
     * @type {string}
     * @memberof BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost
     */
    'model_id'?: string;
    /**
     * 
     * @type {VoiceSettingsResponseModel}
     * @memberof BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost
     */
    'voice_settings'?: VoiceSettingsResponseModel;
}
/**
 * 
 * @export
 * @interface ChapterResponseModel
 */
export interface ChapterResponseModel {
    /**
     * 
     * @type {string}
     * @memberof ChapterResponseModel
     */
    'chapter_id': string;
    /**
     * 
     * @type {string}
     * @memberof ChapterResponseModel
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ChapterResponseModel
     */
    'last_conversion_date_unix': number;
    /**
     * 
     * @type {number}
     * @memberof ChapterResponseModel
     */
    'conversion_progress': number;
    /**
     * 
     * @type {boolean}
     * @memberof ChapterResponseModel
     */
    'can_be_downloaded': boolean;
    /**
     * 
     * @type {string}
     * @memberof ChapterResponseModel
     */
    'state': ChapterResponseModelStateEnum;
    /**
     * 
     * @type {ChapterStatisticsResponseModel}
     * @memberof ChapterResponseModel
     */
    'statistics': ChapterStatisticsResponseModel;
}

export const ChapterResponseModelStateEnum = {
    Default: 'default',
    Converting: 'converting'
} as const;

export type ChapterResponseModelStateEnum = typeof ChapterResponseModelStateEnum[keyof typeof ChapterResponseModelStateEnum];

/**
 * 
 * @export
 * @interface ChapterSnapshotResponseModel
 */
export interface ChapterSnapshotResponseModel {
    /**
     * 
     * @type {string}
     * @memberof ChapterSnapshotResponseModel
     */
    'chapter_snapshot_id': string;
    /**
     * 
     * @type {string}
     * @memberof ChapterSnapshotResponseModel
     */
    'project_id': string;
    /**
     * 
     * @type {string}
     * @memberof ChapterSnapshotResponseModel
     */
    'chapter_id': string;
    /**
     * 
     * @type {number}
     * @memberof ChapterSnapshotResponseModel
     */
    'created_at_unix': number;
    /**
     * 
     * @type {string}
     * @memberof ChapterSnapshotResponseModel
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ChapterSnapshotsResponseModel
 */
export interface ChapterSnapshotsResponseModel {
    /**
     * 
     * @type {Array<ChapterSnapshotResponseModel>}
     * @memberof ChapterSnapshotsResponseModel
     */
    'snapshots': Array<ChapterSnapshotResponseModel>;
}
/**
 * 
 * @export
 * @interface ChapterStatisticsResponseModel
 */
export interface ChapterStatisticsResponseModel {
    /**
     * 
     * @type {number}
     * @memberof ChapterStatisticsResponseModel
     */
    'characters_unconverted': number;
    /**
     * 
     * @type {number}
     * @memberof ChapterStatisticsResponseModel
     */
    'characters_converted': number;
    /**
     * 
     * @type {number}
     * @memberof ChapterStatisticsResponseModel
     */
    'paragraphs_converted': number;
    /**
     * 
     * @type {number}
     * @memberof ChapterStatisticsResponseModel
     */
    'paragraphs_unconverted': number;
}
/**
 * 
 * @export
 * @interface ExtendedSubscriptionResponseModel
 */
export interface ExtendedSubscriptionResponseModel {
    /**
     * 
     * @type {string}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'tier': string;
    /**
     * 
     * @type {number}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'character_count': number;
    /**
     * 
     * @type {number}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'character_limit': number;
    /**
     * 
     * @type {boolean}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'can_extend_character_limit': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'allowed_to_extend_character_limit': boolean;
    /**
     * 
     * @type {number}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'next_character_count_reset_unix': number;
    /**
     * 
     * @type {number}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'voice_limit': number;
    /**
     * 
     * @type {number}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'max_voice_add_edits': number;
    /**
     * 
     * @type {number}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'voice_add_edit_counter': number;
    /**
     * 
     * @type {number}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'professional_voice_limit': number;
    /**
     * 
     * @type {boolean}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'can_extend_voice_limit': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'can_use_instant_voice_cloning': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'can_use_professional_voice_cloning': boolean;
    /**
     * 
     * @type {string}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'currency': ExtendedSubscriptionResponseModelCurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'status': ExtendedSubscriptionResponseModelStatusEnum;
    /**
     * 
     * @type {InvoiceResponseModel}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'next_invoice': InvoiceResponseModel;
    /**
     * 
     * @type {boolean}
     * @memberof ExtendedSubscriptionResponseModel
     */
    'has_open_invoices': boolean;
}

export const ExtendedSubscriptionResponseModelCurrencyEnum = {
    Usd: 'usd',
    Eur: 'eur'
} as const;

export type ExtendedSubscriptionResponseModelCurrencyEnum = typeof ExtendedSubscriptionResponseModelCurrencyEnum[keyof typeof ExtendedSubscriptionResponseModelCurrencyEnum];
export const ExtendedSubscriptionResponseModelStatusEnum = {
    Trialing: 'trialing',
    Active: 'active',
    Incomplete: 'incomplete',
    IncompleteExpired: 'incomplete_expired',
    PastDue: 'past_due',
    Canceled: 'canceled',
    Unpaid: 'unpaid',
    Free: 'free'
} as const;

export type ExtendedSubscriptionResponseModelStatusEnum = typeof ExtendedSubscriptionResponseModelStatusEnum[keyof typeof ExtendedSubscriptionResponseModelStatusEnum];

/**
 * 
 * @export
 * @interface FeedbackResponseModel
 */
export interface FeedbackResponseModel {
    /**
     * 
     * @type {boolean}
     * @memberof FeedbackResponseModel
     */
    'thumbs_up': boolean;
    /**
     * 
     * @type {string}
     * @memberof FeedbackResponseModel
     */
    'feedback': string;
    /**
     * 
     * @type {boolean}
     * @memberof FeedbackResponseModel
     */
    'emotions': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FeedbackResponseModel
     */
    'inaccurate_clone': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FeedbackResponseModel
     */
    'glitches': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FeedbackResponseModel
     */
    'audio_quality': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FeedbackResponseModel
     */
    'other': boolean;
    /**
     * 
     * @type {string}
     * @memberof FeedbackResponseModel
     */
    'review_status'?: string;
}
/**
 * 
 * @export
 * @interface FineTuningResponseModel
 */
export interface FineTuningResponseModel {
    /**
     * 
     * @type {string}
     * @memberof FineTuningResponseModel
     */
    'language': string;
    /**
     * 
     * @type {boolean}
     * @memberof FineTuningResponseModel
     */
    'is_allowed_to_fine_tune': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FineTuningResponseModel
     */
    'fine_tuning_requested': boolean;
    /**
     * 
     * @type {string}
     * @memberof FineTuningResponseModel
     */
    'finetuning_state': FineTuningResponseModelFinetuningStateEnum;
    /**
     * 
     * @type {Array<VerificationAttemptResponseModel>}
     * @memberof FineTuningResponseModel
     */
    'verification_attempts': Array<VerificationAttemptResponseModel>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FineTuningResponseModel
     */
    'verification_failures': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof FineTuningResponseModel
     */
    'verification_attempts_count': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof FineTuningResponseModel
     */
    'slice_ids': Array<string>;
    /**
     * 
     * @type {ManualVerificationResponseModel}
     * @memberof FineTuningResponseModel
     */
    'manual_verification': ManualVerificationResponseModel;
    /**
     * 
     * @type {boolean}
     * @memberof FineTuningResponseModel
     */
    'manual_verification_requested': boolean;
}

export const FineTuningResponseModelFinetuningStateEnum = {
    NotStarted: 'not_started',
    IsFineTuning: 'is_fine_tuning',
    FineTuned: 'fine_tuned'
} as const;

export type FineTuningResponseModelFinetuningStateEnum = typeof FineTuningResponseModelFinetuningStateEnum[keyof typeof FineTuningResponseModelFinetuningStateEnum];

/**
 * 
 * @export
 * @interface GetChaptersResponseModel
 */
export interface GetChaptersResponseModel {
    /**
     * 
     * @type {Array<ChapterResponseModel>}
     * @memberof GetChaptersResponseModel
     */
    'chapters': Array<ChapterResponseModel>;
}
/**
 * 
 * @export
 * @interface GetHistoryResponseModel
 */
export interface GetHistoryResponseModel {
    /**
     * 
     * @type {Array<HistoryItemResponseModel>}
     * @memberof GetHistoryResponseModel
     */
    'history': Array<HistoryItemResponseModel>;
    /**
     * 
     * @type {string}
     * @memberof GetHistoryResponseModel
     */
    'last_history_item_id': string;
    /**
     * 
     * @type {boolean}
     * @memberof GetHistoryResponseModel
     */
    'has_more': boolean;
}
/**
 * 
 * @export
 * @interface GetProjectsResponseModel
 */
export interface GetProjectsResponseModel {
    /**
     * 
     * @type {Array<ProjectResponseModel>}
     * @memberof GetProjectsResponseModel
     */
    'projects': Array<ProjectResponseModel>;
}
/**
 * 
 * @export
 * @interface GetVoicesResponseModel
 */
export interface GetVoicesResponseModel {
    /**
     * 
     * @type {Array<VoiceResponseModel>}
     * @memberof GetVoicesResponseModel
     */
    'voices': Array<VoiceResponseModel>;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface HistoryItemResponseModel
 */
export interface HistoryItemResponseModel {
    /**
     * 
     * @type {string}
     * @memberof HistoryItemResponseModel
     */
    'history_item_id': string;
    /**
     * 
     * @type {string}
     * @memberof HistoryItemResponseModel
     */
    'request_id': string;
    /**
     * 
     * @type {string}
     * @memberof HistoryItemResponseModel
     */
    'voice_id': string;
    /**
     * 
     * @type {string}
     * @memberof HistoryItemResponseModel
     */
    'model_id': string;
    /**
     * 
     * @type {string}
     * @memberof HistoryItemResponseModel
     */
    'voice_name': string;
    /**
     * 
     * @type {string}
     * @memberof HistoryItemResponseModel
     */
    'voice_category': HistoryItemResponseModelVoiceCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof HistoryItemResponseModel
     */
    'text': string;
    /**
     * 
     * @type {number}
     * @memberof HistoryItemResponseModel
     */
    'date_unix': number;
    /**
     * 
     * @type {number}
     * @memberof HistoryItemResponseModel
     */
    'character_count_change_from': number;
    /**
     * 
     * @type {number}
     * @memberof HistoryItemResponseModel
     */
    'character_count_change_to': number;
    /**
     * 
     * @type {string}
     * @memberof HistoryItemResponseModel
     */
    'content_type': string;
    /**
     * 
     * @type {string}
     * @memberof HistoryItemResponseModel
     */
    'state': HistoryItemResponseModelStateEnum;
    /**
     * 
     * @type {object}
     * @memberof HistoryItemResponseModel
     */
    'settings': object;
    /**
     * 
     * @type {FeedbackResponseModel}
     * @memberof HistoryItemResponseModel
     */
    'feedback': FeedbackResponseModel;
}

export const HistoryItemResponseModelVoiceCategoryEnum = {
    Premade: 'premade',
    Cloned: 'cloned',
    Generated: 'generated',
    Professional: 'professional'
} as const;

export type HistoryItemResponseModelVoiceCategoryEnum = typeof HistoryItemResponseModelVoiceCategoryEnum[keyof typeof HistoryItemResponseModelVoiceCategoryEnum];
export const HistoryItemResponseModelStateEnum = {
    Created: 'created',
    Deleted: 'deleted',
    Processing: 'processing'
} as const;

export type HistoryItemResponseModelStateEnum = typeof HistoryItemResponseModelStateEnum[keyof typeof HistoryItemResponseModelStateEnum];

/**
 * 
 * @export
 * @interface InvoiceResponseModel
 */
export interface InvoiceResponseModel {
    /**
     * 
     * @type {number}
     * @memberof InvoiceResponseModel
     */
    'amount_due_cents': number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceResponseModel
     */
    'next_payment_attempt_unix': number;
}
/**
 * 
 * @export
 * @interface LanguageResponseModel
 */
export interface LanguageResponseModel {
    /**
     * 
     * @type {string}
     * @memberof LanguageResponseModel
     */
    'language_id': string;
    /**
     * 
     * @type {string}
     * @memberof LanguageResponseModel
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface ManualVerificationFileResponseModel
 */
export interface ManualVerificationFileResponseModel {
    /**
     * 
     * @type {string}
     * @memberof ManualVerificationFileResponseModel
     */
    'file_id': string;
    /**
     * 
     * @type {string}
     * @memberof ManualVerificationFileResponseModel
     */
    'file_name': string;
    /**
     * 
     * @type {string}
     * @memberof ManualVerificationFileResponseModel
     */
    'mime_type': string;
    /**
     * 
     * @type {number}
     * @memberof ManualVerificationFileResponseModel
     */
    'size_bytes': number;
    /**
     * 
     * @type {number}
     * @memberof ManualVerificationFileResponseModel
     */
    'upload_date_unix': number;
}
/**
 * 
 * @export
 * @interface ManualVerificationResponseModel
 */
export interface ManualVerificationResponseModel {
    /**
     * 
     * @type {string}
     * @memberof ManualVerificationResponseModel
     */
    'extra_text': string;
    /**
     * 
     * @type {number}
     * @memberof ManualVerificationResponseModel
     */
    'request_time_unix': number;
    /**
     * 
     * @type {Array<ManualVerificationFileResponseModel>}
     * @memberof ManualVerificationResponseModel
     */
    'files': Array<ManualVerificationFileResponseModel>;
}
/**
 * 
 * @export
 * @interface ModelResponseModel
 */
export interface ModelResponseModel {
    /**
     * 
     * @type {string}
     * @memberof ModelResponseModel
     */
    'model_id': string;
    /**
     * 
     * @type {string}
     * @memberof ModelResponseModel
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelResponseModel
     */
    'can_be_finetuned': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ModelResponseModel
     */
    'can_do_text_to_speech': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ModelResponseModel
     */
    'can_do_voice_conversion': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ModelResponseModel
     */
    'can_use_style': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ModelResponseModel
     */
    'can_use_speaker_boost': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ModelResponseModel
     */
    'serves_pro_voices': boolean;
    /**
     * 
     * @type {number}
     * @memberof ModelResponseModel
     */
    'token_cost_factor': number;
    /**
     * 
     * @type {string}
     * @memberof ModelResponseModel
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelResponseModel
     */
    'requires_alpha_access': boolean;
    /**
     * 
     * @type {number}
     * @memberof ModelResponseModel
     */
    'max_characters_request_free_user': number;
    /**
     * 
     * @type {number}
     * @memberof ModelResponseModel
     */
    'max_characters_request_subscribed_user': number;
    /**
     * 
     * @type {Array<LanguageResponseModel>}
     * @memberof ModelResponseModel
     */
    'languages': Array<LanguageResponseModel>;
}
/**
 * 
 * @export
 * @interface ProjectExtendedResponseModel
 */
export interface ProjectExtendedResponseModel {
    /**
     * 
     * @type {string}
     * @memberof ProjectExtendedResponseModel
     */
    'project_id': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectExtendedResponseModel
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ProjectExtendedResponseModel
     */
    'create_date_unix': number;
    /**
     * 
     * @type {string}
     * @memberof ProjectExtendedResponseModel
     */
    'default_title_voice_id': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectExtendedResponseModel
     */
    'default_paragraph_voice_id': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectExtendedResponseModel
     */
    'default_model_id': string;
    /**
     * 
     * @type {number}
     * @memberof ProjectExtendedResponseModel
     */
    'last_conversion_date_unix': number;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectExtendedResponseModel
     */
    'can_be_downloaded': boolean;
    /**
     * 
     * @type {string}
     * @memberof ProjectExtendedResponseModel
     */
    'state': ProjectExtendedResponseModelStateEnum;
    /**
     * 
     * @type {Array<ChapterResponseModel>}
     * @memberof ProjectExtendedResponseModel
     */
    'chapters': Array<ChapterResponseModel>;
}

export const ProjectExtendedResponseModelStateEnum = {
    Default: 'default',
    Converting: 'converting'
} as const;

export type ProjectExtendedResponseModelStateEnum = typeof ProjectExtendedResponseModelStateEnum[keyof typeof ProjectExtendedResponseModelStateEnum];

/**
 * 
 * @export
 * @interface ProjectResponseModel
 */
export interface ProjectResponseModel {
    /**
     * 
     * @type {string}
     * @memberof ProjectResponseModel
     */
    'project_id': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectResponseModel
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ProjectResponseModel
     */
    'create_date_unix': number;
    /**
     * 
     * @type {string}
     * @memberof ProjectResponseModel
     */
    'default_title_voice_id': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectResponseModel
     */
    'default_paragraph_voice_id': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectResponseModel
     */
    'default_model_id': string;
    /**
     * 
     * @type {number}
     * @memberof ProjectResponseModel
     */
    'last_conversion_date_unix': number;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectResponseModel
     */
    'can_be_downloaded': boolean;
    /**
     * 
     * @type {string}
     * @memberof ProjectResponseModel
     */
    'state': ProjectResponseModelStateEnum;
}

export const ProjectResponseModelStateEnum = {
    Default: 'default',
    Converting: 'converting'
} as const;

export type ProjectResponseModelStateEnum = typeof ProjectResponseModelStateEnum[keyof typeof ProjectResponseModelStateEnum];

/**
 * 
 * @export
 * @interface ProjectSnapshotResponseModel
 */
export interface ProjectSnapshotResponseModel {
    /**
     * 
     * @type {string}
     * @memberof ProjectSnapshotResponseModel
     */
    'project_snapshot_id': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectSnapshotResponseModel
     */
    'project_id': string;
    /**
     * 
     * @type {number}
     * @memberof ProjectSnapshotResponseModel
     */
    'created_at_unix': number;
    /**
     * 
     * @type {string}
     * @memberof ProjectSnapshotResponseModel
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProjectSnapshotsResponseModel
 */
export interface ProjectSnapshotsResponseModel {
    /**
     * 
     * @type {Array<ProjectSnapshotResponseModel>}
     * @memberof ProjectSnapshotsResponseModel
     */
    'snapshots': Array<ProjectSnapshotResponseModel>;
}
/**
 * 
 * @export
 * @interface RecordingResponseModel
 */
export interface RecordingResponseModel {
    /**
     * 
     * @type {string}
     * @memberof RecordingResponseModel
     */
    'recording_id': string;
    /**
     * 
     * @type {string}
     * @memberof RecordingResponseModel
     */
    'mime_type': string;
    /**
     * 
     * @type {number}
     * @memberof RecordingResponseModel
     */
    'size_bytes': number;
    /**
     * 
     * @type {number}
     * @memberof RecordingResponseModel
     */
    'upload_date_unix': number;
    /**
     * 
     * @type {string}
     * @memberof RecordingResponseModel
     */
    'transcription': string;
}
/**
 * 
 * @export
 * @interface SampleResponseModel
 */
export interface SampleResponseModel {
    /**
     * 
     * @type {string}
     * @memberof SampleResponseModel
     */
    'sample_id': string;
    /**
     * 
     * @type {string}
     * @memberof SampleResponseModel
     */
    'file_name': string;
    /**
     * 
     * @type {string}
     * @memberof SampleResponseModel
     */
    'mime_type': string;
    /**
     * 
     * @type {number}
     * @memberof SampleResponseModel
     */
    'size_bytes': number;
    /**
     * 
     * @type {string}
     * @memberof SampleResponseModel
     */
    'hash': string;
}
/**
 * 
 * @export
 * @interface SubscriptionResponseModel
 */
export interface SubscriptionResponseModel {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionResponseModel
     */
    'tier': string;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionResponseModel
     */
    'character_count': number;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionResponseModel
     */
    'character_limit': number;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionResponseModel
     */
    'can_extend_character_limit': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionResponseModel
     */
    'allowed_to_extend_character_limit': boolean;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionResponseModel
     */
    'next_character_count_reset_unix': number;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionResponseModel
     */
    'voice_limit': number;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionResponseModel
     */
    'max_voice_add_edits': number;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionResponseModel
     */
    'voice_add_edit_counter': number;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionResponseModel
     */
    'professional_voice_limit': number;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionResponseModel
     */
    'can_extend_voice_limit': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionResponseModel
     */
    'can_use_instant_voice_cloning': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionResponseModel
     */
    'can_use_professional_voice_cloning': boolean;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionResponseModel
     */
    'currency': SubscriptionResponseModelCurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionResponseModel
     */
    'status': SubscriptionResponseModelStatusEnum;
}

export const SubscriptionResponseModelCurrencyEnum = {
    Usd: 'usd',
    Eur: 'eur'
} as const;

export type SubscriptionResponseModelCurrencyEnum = typeof SubscriptionResponseModelCurrencyEnum[keyof typeof SubscriptionResponseModelCurrencyEnum];
export const SubscriptionResponseModelStatusEnum = {
    Trialing: 'trialing',
    Active: 'active',
    Incomplete: 'incomplete',
    IncompleteExpired: 'incomplete_expired',
    PastDue: 'past_due',
    Canceled: 'canceled',
    Unpaid: 'unpaid',
    Free: 'free'
} as const;

export type SubscriptionResponseModelStatusEnum = typeof SubscriptionResponseModelStatusEnum[keyof typeof SubscriptionResponseModelStatusEnum];

/**
 * 
 * @export
 * @interface UserResponseModel
 */
export interface UserResponseModel {
    /**
     * 
     * @type {SubscriptionResponseModel}
     * @memberof UserResponseModel
     */
    'subscription': SubscriptionResponseModel;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponseModel
     */
    'is_new_user': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserResponseModel
     */
    'xi_api_key': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponseModel
     */
    'can_use_delayed_payment_methods': boolean;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface VerificationAttemptResponseModel
 */
export interface VerificationAttemptResponseModel {
    /**
     * 
     * @type {string}
     * @memberof VerificationAttemptResponseModel
     */
    'text': string;
    /**
     * 
     * @type {number}
     * @memberof VerificationAttemptResponseModel
     */
    'date_unix': number;
    /**
     * 
     * @type {boolean}
     * @memberof VerificationAttemptResponseModel
     */
    'accepted': boolean;
    /**
     * 
     * @type {number}
     * @memberof VerificationAttemptResponseModel
     */
    'similarity': number;
    /**
     * 
     * @type {number}
     * @memberof VerificationAttemptResponseModel
     */
    'levenshtein_distance': number;
    /**
     * 
     * @type {RecordingResponseModel}
     * @memberof VerificationAttemptResponseModel
     */
    'recording': RecordingResponseModel;
}
/**
 * 
 * @export
 * @interface VoiceResponseModel
 */
export interface VoiceResponseModel {
    /**
     * 
     * @type {string}
     * @memberof VoiceResponseModel
     */
    'voice_id': string;
    /**
     * 
     * @type {string}
     * @memberof VoiceResponseModel
     */
    'name': string;
    /**
     * 
     * @type {Array<SampleResponseModel>}
     * @memberof VoiceResponseModel
     */
    'samples': Array<SampleResponseModel>;
    /**
     * 
     * @type {string}
     * @memberof VoiceResponseModel
     */
    'category': string;
    /**
     * 
     * @type {FineTuningResponseModel}
     * @memberof VoiceResponseModel
     */
    'fine_tuning': FineTuningResponseModel;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof VoiceResponseModel
     */
    'labels': { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof VoiceResponseModel
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof VoiceResponseModel
     */
    'preview_url': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof VoiceResponseModel
     */
    'available_for_tiers': Array<string>;
    /**
     * 
     * @type {VoiceSettingsResponseModel}
     * @memberof VoiceResponseModel
     */
    'settings': VoiceSettingsResponseModel;
    /**
     * 
     * @type {VoiceSharingResponseModel}
     * @memberof VoiceResponseModel
     */
    'sharing': VoiceSharingResponseModel;
    /**
     * 
     * @type {Array<string>}
     * @memberof VoiceResponseModel
     */
    'high_quality_base_model_ids': Array<string>;
}
/**
 * 
 * @export
 * @interface VoiceSettingsResponseModel
 */
export interface VoiceSettingsResponseModel {
    /**
     * 
     * @type {number}
     * @memberof VoiceSettingsResponseModel
     */
    'stability': number;
    /**
     * 
     * @type {number}
     * @memberof VoiceSettingsResponseModel
     */
    'similarity_boost': number;
    /**
     * 
     * @type {number}
     * @memberof VoiceSettingsResponseModel
     */
    'style'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof VoiceSettingsResponseModel
     */
    'use_speaker_boost'?: boolean;
}
/**
 * 
 * @export
 * @interface VoiceSharingResponseModel
 */
export interface VoiceSharingResponseModel {
    /**
     * 
     * @type {string}
     * @memberof VoiceSharingResponseModel
     */
    'status': VoiceSharingResponseModelStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof VoiceSharingResponseModel
     */
    'history_item_sample_id': string;
    /**
     * 
     * @type {string}
     * @memberof VoiceSharingResponseModel
     */
    'original_voice_id': string;
    /**
     * 
     * @type {string}
     * @memberof VoiceSharingResponseModel
     */
    'public_owner_id': string;
    /**
     * 
     * @type {number}
     * @memberof VoiceSharingResponseModel
     */
    'liked_by_count': number;
    /**
     * 
     * @type {number}
     * @memberof VoiceSharingResponseModel
     */
    'cloned_by_count': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof VoiceSharingResponseModel
     */
    'whitelisted_emails': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof VoiceSharingResponseModel
     */
    'name': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof VoiceSharingResponseModel
     */
    'labels': { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof VoiceSharingResponseModel
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof VoiceSharingResponseModel
     */
    'review_status': VoiceSharingResponseModelReviewStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof VoiceSharingResponseModel
     */
    'review_message': string;
    /**
     * 
     * @type {boolean}
     * @memberof VoiceSharingResponseModel
     */
    'enabled_in_library': boolean;
}

export const VoiceSharingResponseModelStatusEnum = {
    Enabled: 'enabled',
    Disabled: 'disabled',
    Copied: 'copied',
    CopiedDisabled: 'copied_disabled'
} as const;

export type VoiceSharingResponseModelStatusEnum = typeof VoiceSharingResponseModelStatusEnum[keyof typeof VoiceSharingResponseModelStatusEnum];
export const VoiceSharingResponseModelReviewStatusEnum = {
    NotRequested: 'not_requested',
    Pending: 'pending',
    Declined: 'declined',
    Allowed: 'allowed',
    AllowedWithChanges: 'allowed_with_changes'
} as const;

export type VoiceSharingResponseModelReviewStatusEnum = typeof VoiceSharingResponseModelReviewStatusEnum[keyof typeof VoiceSharingResponseModelReviewStatusEnum];


/**
 * HistoryApi - axios parameter creator
 * @export
 */
export const HistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a history item by its ID
         * @summary Delete History Item
         * @param {string} historyItemId History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHistoryItemV1HistoryHistoryItemIdDelete: async (historyItemId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'historyItemId' is not null or undefined
            assertParamExists('deleteHistoryItemV1HistoryHistoryItemIdDelete', 'historyItemId', historyItemId)
            const localVarPath = `/v1/history/{history_item_id}`
                .replace(`{${"history_item_id"}}`, encodeURIComponent(String(historyItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Download one or more history items. If one history item ID is provided, we will return a single audio file. If more than one history item IDs are provided, we will provide the history items packed into a .zip file.
         * @summary Download History Items
         * @param {BodyDownloadHistoryItemsV1HistoryDownloadPost} bodyDownloadHistoryItemsV1HistoryDownloadPost 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadHistoryItemsV1HistoryDownloadPost: async (bodyDownloadHistoryItemsV1HistoryDownloadPost: BodyDownloadHistoryItemsV1HistoryDownloadPost, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyDownloadHistoryItemsV1HistoryDownloadPost' is not null or undefined
            assertParamExists('downloadHistoryItemsV1HistoryDownloadPost', 'bodyDownloadHistoryItemsV1HistoryDownloadPost', bodyDownloadHistoryItemsV1HistoryDownloadPost)
            const localVarPath = `/v1/history/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyDownloadHistoryItemsV1HistoryDownloadPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the audio of an history item.
         * @summary Get Audio From History Item
         * @param {string} historyItemId History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet: async (historyItemId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'historyItemId' is not null or undefined
            assertParamExists('getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet', 'historyItemId', historyItemId)
            const localVarPath = `/v1/history/{history_item_id}/audio`
                .replace(`{${"history_item_id"}}`, encodeURIComponent(String(historyItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns metadata about all your generated audio.
         * @summary Get Generated Items
         * @param {number} [pageSize] How many history items to return at maximum. Can not exceed 1000, defaults to 100.
         * @param {string} [startAfterHistoryItemId] After which history_item_id to start fetching, use this parameter to paginate across a large collection of history items. In case this parameter is not provided history items will be fetched starting from the most recently created one ordered descending by their creation date.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeneratedItemsV1HistoryGet: async (pageSize?: number, startAfterHistoryItemId?: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (startAfterHistoryItemId !== undefined) {
                localVarQueryParameter['start_after_history_item_id'] = startAfterHistoryItemId;
            }

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about an history item by its ID.
         * @summary Get History Item By Id
         * @param {string} historyItemId History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoryItemByIDV1HistoryHistoryItemIdGet: async (historyItemId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'historyItemId' is not null or undefined
            assertParamExists('getHistoryItemByIDV1HistoryHistoryItemIdGet', 'historyItemId', historyItemId)
            const localVarPath = `/v1/history/{history_item_id}`
                .replace(`{${"history_item_id"}}`, encodeURIComponent(String(historyItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HistoryApi - functional programming interface
 * @export
 */
export const HistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a history item by its ID
         * @summary Delete History Item
         * @param {string} historyItemId History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHistoryItemV1HistoryHistoryItemIdDelete(historyItemId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHistoryItemV1HistoryHistoryItemIdDelete(historyItemId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Download one or more history items. If one history item ID is provided, we will return a single audio file. If more than one history item IDs are provided, we will provide the history items packed into a .zip file.
         * @summary Download History Items
         * @param {BodyDownloadHistoryItemsV1HistoryDownloadPost} bodyDownloadHistoryItemsV1HistoryDownloadPost 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadHistoryItemsV1HistoryDownloadPost(bodyDownloadHistoryItemsV1HistoryDownloadPost: BodyDownloadHistoryItemsV1HistoryDownloadPost, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadHistoryItemsV1HistoryDownloadPost(bodyDownloadHistoryItemsV1HistoryDownloadPost, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the audio of an history item.
         * @summary Get Audio From History Item
         * @param {string} historyItemId History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet(historyItemId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet(historyItemId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns metadata about all your generated audio.
         * @summary Get Generated Items
         * @param {number} [pageSize] How many history items to return at maximum. Can not exceed 1000, defaults to 100.
         * @param {string} [startAfterHistoryItemId] After which history_item_id to start fetching, use this parameter to paginate across a large collection of history items. In case this parameter is not provided history items will be fetched starting from the most recently created one ordered descending by their creation date.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGeneratedItemsV1HistoryGet(pageSize?: number, startAfterHistoryItemId?: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHistoryResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGeneratedItemsV1HistoryGet(pageSize, startAfterHistoryItemId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about an history item by its ID.
         * @summary Get History Item By Id
         * @param {string} historyItemId History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoryItemByIDV1HistoryHistoryItemIdGet(historyItemId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HistoryItemResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistoryItemByIDV1HistoryHistoryItemIdGet(historyItemId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HistoryApi - factory interface
 * @export
 */
export const HistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HistoryApiFp(configuration)
    return {
        /**
         * Delete a history item by its ID
         * @summary Delete History Item
         * @param {HistoryApiDeleteHistoryItemV1HistoryHistoryItemIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHistoryItemV1HistoryHistoryItemIdDelete(requestParameters: HistoryApiDeleteHistoryItemV1HistoryHistoryItemIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteHistoryItemV1HistoryHistoryItemIdDelete(requestParameters.historyItemId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Download one or more history items. If one history item ID is provided, we will return a single audio file. If more than one history item IDs are provided, we will provide the history items packed into a .zip file.
         * @summary Download History Items
         * @param {HistoryApiDownloadHistoryItemsV1HistoryDownloadPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadHistoryItemsV1HistoryDownloadPost(requestParameters: HistoryApiDownloadHistoryItemsV1HistoryDownloadPostRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.downloadHistoryItemsV1HistoryDownloadPost(requestParameters.bodyDownloadHistoryItemsV1HistoryDownloadPost, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the audio of an history item.
         * @summary Get Audio From History Item
         * @param {HistoryApiGetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet(requestParameters: HistoryApiGetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet(requestParameters.historyItemId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns metadata about all your generated audio.
         * @summary Get Generated Items
         * @param {HistoryApiGetGeneratedItemsV1HistoryGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeneratedItemsV1HistoryGet(requestParameters: HistoryApiGetGeneratedItemsV1HistoryGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetHistoryResponseModel> {
            return localVarFp.getGeneratedItemsV1HistoryGet(requestParameters.pageSize, requestParameters.startAfterHistoryItemId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about an history item by its ID.
         * @summary Get History Item By Id
         * @param {HistoryApiGetHistoryItemByIDV1HistoryHistoryItemIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoryItemByIDV1HistoryHistoryItemIdGet(requestParameters: HistoryApiGetHistoryItemByIDV1HistoryHistoryItemIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<HistoryItemResponseModel> {
            return localVarFp.getHistoryItemByIDV1HistoryHistoryItemIdGet(requestParameters.historyItemId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteHistoryItemV1HistoryHistoryItemIdDelete operation in HistoryApi.
 * @export
 * @interface HistoryApiDeleteHistoryItemV1HistoryHistoryItemIdDeleteRequest
 */
export interface HistoryApiDeleteHistoryItemV1HistoryHistoryItemIdDeleteRequest {
    /**
     * History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs.
     * @type {string}
     * @memberof HistoryApiDeleteHistoryItemV1HistoryHistoryItemIdDelete
     */
    readonly historyItemId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof HistoryApiDeleteHistoryItemV1HistoryHistoryItemIdDelete
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for downloadHistoryItemsV1HistoryDownloadPost operation in HistoryApi.
 * @export
 * @interface HistoryApiDownloadHistoryItemsV1HistoryDownloadPostRequest
 */
export interface HistoryApiDownloadHistoryItemsV1HistoryDownloadPostRequest {
    /**
     * 
     * @type {BodyDownloadHistoryItemsV1HistoryDownloadPost}
     * @memberof HistoryApiDownloadHistoryItemsV1HistoryDownloadPost
     */
    readonly bodyDownloadHistoryItemsV1HistoryDownloadPost: BodyDownloadHistoryItemsV1HistoryDownloadPost

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof HistoryApiDownloadHistoryItemsV1HistoryDownloadPost
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet operation in HistoryApi.
 * @export
 * @interface HistoryApiGetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetRequest
 */
export interface HistoryApiGetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetRequest {
    /**
     * History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs.
     * @type {string}
     * @memberof HistoryApiGetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet
     */
    readonly historyItemId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof HistoryApiGetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for getGeneratedItemsV1HistoryGet operation in HistoryApi.
 * @export
 * @interface HistoryApiGetGeneratedItemsV1HistoryGetRequest
 */
export interface HistoryApiGetGeneratedItemsV1HistoryGetRequest {
    /**
     * How many history items to return at maximum. Can not exceed 1000, defaults to 100.
     * @type {number}
     * @memberof HistoryApiGetGeneratedItemsV1HistoryGet
     */
    readonly pageSize?: number

    /**
     * After which history_item_id to start fetching, use this parameter to paginate across a large collection of history items. In case this parameter is not provided history items will be fetched starting from the most recently created one ordered descending by their creation date.
     * @type {string}
     * @memberof HistoryApiGetGeneratedItemsV1HistoryGet
     */
    readonly startAfterHistoryItemId?: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof HistoryApiGetGeneratedItemsV1HistoryGet
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for getHistoryItemByIDV1HistoryHistoryItemIdGet operation in HistoryApi.
 * @export
 * @interface HistoryApiGetHistoryItemByIDV1HistoryHistoryItemIdGetRequest
 */
export interface HistoryApiGetHistoryItemByIDV1HistoryHistoryItemIdGetRequest {
    /**
     * History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs.
     * @type {string}
     * @memberof HistoryApiGetHistoryItemByIDV1HistoryHistoryItemIdGet
     */
    readonly historyItemId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof HistoryApiGetHistoryItemByIDV1HistoryHistoryItemIdGet
     */
    readonly xiApiKey?: string
}

/**
 * HistoryApi - object-oriented interface
 * @export
 * @class HistoryApi
 * @extends {BaseAPI}
 */
export class HistoryApi extends BaseAPI {
    /**
     * Delete a history item by its ID
     * @summary Delete History Item
     * @param {HistoryApiDeleteHistoryItemV1HistoryHistoryItemIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApi
     */
    public deleteHistoryItemV1HistoryHistoryItemIdDelete(requestParameters: HistoryApiDeleteHistoryItemV1HistoryHistoryItemIdDeleteRequest, options?: AxiosRequestConfig) {
        return HistoryApiFp(this.configuration).deleteHistoryItemV1HistoryHistoryItemIdDelete(requestParameters.historyItemId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Download one or more history items. If one history item ID is provided, we will return a single audio file. If more than one history item IDs are provided, we will provide the history items packed into a .zip file.
     * @summary Download History Items
     * @param {HistoryApiDownloadHistoryItemsV1HistoryDownloadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApi
     */
    public downloadHistoryItemsV1HistoryDownloadPost(requestParameters: HistoryApiDownloadHistoryItemsV1HistoryDownloadPostRequest, options?: AxiosRequestConfig) {
        return HistoryApiFp(this.configuration).downloadHistoryItemsV1HistoryDownloadPost(requestParameters.bodyDownloadHistoryItemsV1HistoryDownloadPost, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the audio of an history item.
     * @summary Get Audio From History Item
     * @param {HistoryApiGetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApi
     */
    public getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet(requestParameters: HistoryApiGetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetRequest, options?: AxiosRequestConfig) {
        return HistoryApiFp(this.configuration).getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet(requestParameters.historyItemId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns metadata about all your generated audio.
     * @summary Get Generated Items
     * @param {HistoryApiGetGeneratedItemsV1HistoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApi
     */
    public getGeneratedItemsV1HistoryGet(requestParameters: HistoryApiGetGeneratedItemsV1HistoryGetRequest = {}, options?: AxiosRequestConfig) {
        return HistoryApiFp(this.configuration).getGeneratedItemsV1HistoryGet(requestParameters.pageSize, requestParameters.startAfterHistoryItemId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about an history item by its ID.
     * @summary Get History Item By Id
     * @param {HistoryApiGetHistoryItemByIDV1HistoryHistoryItemIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApi
     */
    public getHistoryItemByIDV1HistoryHistoryItemIdGet(requestParameters: HistoryApiGetHistoryItemByIDV1HistoryHistoryItemIdGetRequest, options?: AxiosRequestConfig) {
        return HistoryApiFp(this.configuration).getHistoryItemByIDV1HistoryHistoryItemIdGet(requestParameters.historyItemId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ModelsApi - axios parameter creator
 * @export
 */
export const ModelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a list of available models.
         * @summary Get Models
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelsV1ModelsGet: async (xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelsApi - functional programming interface
 * @export
 */
export const ModelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModelsApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets a list of available models.
         * @summary Get Models
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModelsV1ModelsGet(xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResponseModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getModelsV1ModelsGet(xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ModelsApi - factory interface
 * @export
 */
export const ModelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModelsApiFp(configuration)
    return {
        /**
         * Gets a list of available models.
         * @summary Get Models
         * @param {ModelsApiGetModelsV1ModelsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelsV1ModelsGet(requestParameters: ModelsApiGetModelsV1ModelsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ModelResponseModel>> {
            return localVarFp.getModelsV1ModelsGet(requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getModelsV1ModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiGetModelsV1ModelsGetRequest
 */
export interface ModelsApiGetModelsV1ModelsGetRequest {
    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof ModelsApiGetModelsV1ModelsGet
     */
    readonly xiApiKey?: string
}

/**
 * ModelsApi - object-oriented interface
 * @export
 * @class ModelsApi
 * @extends {BaseAPI}
 */
export class ModelsApi extends BaseAPI {
    /**
     * Gets a list of available models.
     * @summary Get Models
     * @param {ModelsApiGetModelsV1ModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public getModelsV1ModelsGet(requestParameters: ModelsApiGetModelsV1ModelsGetRequest = {}, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).getModelsV1ModelsGet(requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new project, it can be either initialized as blank, from a document or from a URL.
         * @summary Add Project
         * @param {string} name The name of the project, used for identification only.
         * @param {string} defaultTitleVoiceId The voice_id that corresponds to the default voice used for new titles.
         * @param {string} defaultParagraphVoiceId The voice_id that corresponds to the default voice used for new paragraphs.
         * @param {string} defaultModelId The model_id of the model to be used for this project, you can query GET https://api.elevenlabs.io/v1/models to list all available models.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {string} [fromUrl] An optional URL from which we will extract content to initialize the project. If this is set, \\\&#39;from_url\\\&#39; must be null. If neither \\\&#39;from_url\\\&#39; or \\\&#39;from_document\\\&#39; are provided we will initialize the project as blank.
         * @param {File} [fromDocument] An optional .epub, .pdf, .txt or similar file can be provided. If provided, we will initialize the project with its content. If this is set, \\\&#39;from_url\\\&#39; must be null.  If neither \\\&#39;from_url\\\&#39; or \\\&#39;from_document\\\&#39; are provided we will initialize the project as blank.
         * @param {string} [qualityPreset] Output quality of the generated audio. Must be one of: standard - standard output format, 128kbps with 44.1kHz sample rate. high - high quality output format, 192kbps with 44.1kHz sample rate and major improvements on our side. Using this setting increases the character cost by 20%. ultra - ultra quality output format, 192kbps with 44.1kHz sample rate and highest improvements on our side. Using this setting increases the character cost by 50%. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProjectV1ProjectsAddPost: async (name: string, defaultTitleVoiceId: string, defaultParagraphVoiceId: string, defaultModelId: string, xiApiKey?: string, fromUrl?: string, fromDocument?: File, qualityPreset?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('addProjectV1ProjectsAddPost', 'name', name)
            // verify required parameter 'defaultTitleVoiceId' is not null or undefined
            assertParamExists('addProjectV1ProjectsAddPost', 'defaultTitleVoiceId', defaultTitleVoiceId)
            // verify required parameter 'defaultParagraphVoiceId' is not null or undefined
            assertParamExists('addProjectV1ProjectsAddPost', 'defaultParagraphVoiceId', defaultParagraphVoiceId)
            // verify required parameter 'defaultModelId' is not null or undefined
            assertParamExists('addProjectV1ProjectsAddPost', 'defaultModelId', defaultModelId)
            const localVarPath = `/v1/projects/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (fromUrl !== undefined) { 
                localVarFormParams.append('from_url', fromUrl as any);
            }
    
            if (fromDocument !== undefined) { 
                localVarFormParams.append('from_document', fromDocument as any);
            }
    
            if (defaultTitleVoiceId !== undefined) { 
                localVarFormParams.append('default_title_voice_id', defaultTitleVoiceId as any);
            }
    
            if (defaultParagraphVoiceId !== undefined) { 
                localVarFormParams.append('default_paragraph_voice_id', defaultParagraphVoiceId as any);
            }
    
            if (defaultModelId !== undefined) { 
                localVarFormParams.append('default_model_id', defaultModelId as any);
            }
    
            if (qualityPreset !== undefined) { 
                localVarFormParams.append('quality_preset', qualityPreset as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts conversion of a specific chapter.
         * @summary Convert Chapter
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertChapterV1ProjectsProjectIdChaptersChapterIdConvertPost: async (projectId: string, chapterId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('convertChapterV1ProjectsProjectIdChaptersChapterIdConvertPost', 'projectId', projectId)
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('convertChapterV1ProjectsProjectIdChaptersChapterIdConvertPost', 'chapterId', chapterId)
            const localVarPath = `/v1/projects/{project_id}/chapters/{chapter_id}/convert`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts conversion of a project and all of its chapters.
         * @summary Convert Project
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertProjectV1ProjectsProjectIdConvertPost: async (projectId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('convertProjectV1ProjectsProjectIdConvertPost', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}/convert`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a chapter by its chapter_id.
         * @summary Delete Chapter
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChapterV1ProjectsProjectIdChaptersChapterIdDelete: async (projectId: string, chapterId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteChapterV1ProjectsProjectIdChaptersChapterIdDelete', 'projectId', projectId)
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('deleteChapterV1ProjectsProjectIdChaptersChapterIdDelete', 'chapterId', chapterId)
            const localVarPath = `/v1/projects/{project_id}/chapters/{chapter_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a project by its project_id.
         * @summary Delete Project
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectV1ProjectsProjectIdDelete: async (projectId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteProjectV1ProjectsProjectIdDelete', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about a specific chapter.
         * @summary Get Chapter By Id
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapterByIDV1ProjectsProjectIdChaptersChapterIdGet: async (projectId: string, chapterId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getChapterByIDV1ProjectsProjectIdChaptersChapterIdGet', 'projectId', projectId)
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('getChapterByIDV1ProjectsProjectIdChaptersChapterIdGet', 'chapterId', chapterId)
            const localVarPath = `/v1/projects/{project_id}/chapters/{chapter_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets information about all the snapshots of a chapter, each snapshot corresponds can be downloaded as audio. Whenever a chapter is converted a snapshot will be automatically created.
         * @summary Get Chapter Snapshots
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGet: async (projectId: string, chapterId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGet', 'projectId', projectId)
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('getChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGet', 'chapterId', chapterId)
            const localVarPath = `/v1/projects/{project_id}/chapters/{chapter_id}/snapshots`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of your chapters for a project together and its metadata.
         * @summary Get Chapters
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChaptersV1ProjectsProjectIdChaptersGet: async (projectId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getChaptersV1ProjectsProjectIdChaptersGet', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}/chapters`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about a specific project. This endpoint returns more detailed information about a project than GET api.elevenlabs.io/v1/projects.
         * @summary Get Project By Id
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectByIDV1ProjectsProjectIdGet: async (projectId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectByIDV1ProjectsProjectIdGet', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the snapshots of a project.
         * @summary Get Project Snapshots
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSnapshotsV1ProjectsProjectIdSnapshotsGet: async (projectId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectSnapshotsV1ProjectsProjectIdSnapshotsGet', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}/snapshots`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of your projects together and its metadata.
         * @summary Get Projects
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsV1ProjectsGet: async (xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stream the audio from a chapter snapshot. Use GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to return the chapter snapshots of a chapter.
         * @summary Stream Chapter Audio
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
         * @param {string} chapterSnapshotId The chapter_snapshot_id of the chapter snapshot. You can query GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to the all available snapshots for a chapter.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost: async (projectId: string, chapterId: string, chapterSnapshotId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('streamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost', 'projectId', projectId)
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('streamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost', 'chapterId', chapterId)
            // verify required parameter 'chapterSnapshotId' is not null or undefined
            assertParamExists('streamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost', 'chapterSnapshotId', chapterSnapshotId)
            const localVarPath = `/v1/projects/{project_id}/chapters/{chapter_id}/snapshots/{chapter_snapshot_id}/stream`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"chapter_id"}}`, encodeURIComponent(String(chapterId)))
                .replace(`{${"chapter_snapshot_id"}}`, encodeURIComponent(String(chapterSnapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stream the audio from a project snapshot.
         * @summary Stream Project Audio
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} projectSnapshotId The project_snapshot_id of the project snapshot. You can query GET /v1/projects/{project_id}/snapshots to list all available snapshots for a project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost: async (projectId: string, projectSnapshotId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('streamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost', 'projectId', projectId)
            // verify required parameter 'projectSnapshotId' is not null or undefined
            assertParamExists('streamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost', 'projectSnapshotId', projectSnapshotId)
            const localVarPath = `/v1/projects/{project_id}/snapshots/{project_snapshot_id}/stream`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"project_snapshot_id"}}`, encodeURIComponent(String(projectSnapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new project, it can be either initialized as blank, from a document or from a URL.
         * @summary Add Project
         * @param {string} name The name of the project, used for identification only.
         * @param {string} defaultTitleVoiceId The voice_id that corresponds to the default voice used for new titles.
         * @param {string} defaultParagraphVoiceId The voice_id that corresponds to the default voice used for new paragraphs.
         * @param {string} defaultModelId The model_id of the model to be used for this project, you can query GET https://api.elevenlabs.io/v1/models to list all available models.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {string} [fromUrl] An optional URL from which we will extract content to initialize the project. If this is set, \\\&#39;from_url\\\&#39; must be null. If neither \\\&#39;from_url\\\&#39; or \\\&#39;from_document\\\&#39; are provided we will initialize the project as blank.
         * @param {File} [fromDocument] An optional .epub, .pdf, .txt or similar file can be provided. If provided, we will initialize the project with its content. If this is set, \\\&#39;from_url\\\&#39; must be null.  If neither \\\&#39;from_url\\\&#39; or \\\&#39;from_document\\\&#39; are provided we will initialize the project as blank.
         * @param {string} [qualityPreset] Output quality of the generated audio. Must be one of: standard - standard output format, 128kbps with 44.1kHz sample rate. high - high quality output format, 192kbps with 44.1kHz sample rate and major improvements on our side. Using this setting increases the character cost by 20%. ultra - ultra quality output format, 192kbps with 44.1kHz sample rate and highest improvements on our side. Using this setting increases the character cost by 50%. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addProjectV1ProjectsAddPost(name: string, defaultTitleVoiceId: string, defaultParagraphVoiceId: string, defaultModelId: string, xiApiKey?: string, fromUrl?: string, fromDocument?: File, qualityPreset?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddProjectResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProjectV1ProjectsAddPost(name, defaultTitleVoiceId, defaultParagraphVoiceId, defaultModelId, xiApiKey, fromUrl, fromDocument, qualityPreset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Starts conversion of a specific chapter.
         * @summary Convert Chapter
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertChapterV1ProjectsProjectIdChaptersChapterIdConvertPost(projectId: string, chapterId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertChapterV1ProjectsProjectIdChaptersChapterIdConvertPost(projectId, chapterId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Starts conversion of a project and all of its chapters.
         * @summary Convert Project
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertProjectV1ProjectsProjectIdConvertPost(projectId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertProjectV1ProjectsProjectIdConvertPost(projectId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a chapter by its chapter_id.
         * @summary Delete Chapter
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChapterV1ProjectsProjectIdChaptersChapterIdDelete(projectId: string, chapterId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChapterV1ProjectsProjectIdChaptersChapterIdDelete(projectId, chapterId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a project by its project_id.
         * @summary Delete Project
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectV1ProjectsProjectIdDelete(projectId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectV1ProjectsProjectIdDelete(projectId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about a specific chapter.
         * @summary Get Chapter By Id
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChapterByIDV1ProjectsProjectIdChaptersChapterIdGet(projectId: string, chapterId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapterResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChapterByIDV1ProjectsProjectIdChaptersChapterIdGet(projectId, chapterId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets information about all the snapshots of a chapter, each snapshot corresponds can be downloaded as audio. Whenever a chapter is converted a snapshot will be automatically created.
         * @summary Get Chapter Snapshots
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGet(projectId: string, chapterId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapterSnapshotsResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGet(projectId, chapterId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of your chapters for a project together and its metadata.
         * @summary Get Chapters
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChaptersV1ProjectsProjectIdChaptersGet(projectId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetChaptersResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChaptersV1ProjectsProjectIdChaptersGet(projectId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about a specific project. This endpoint returns more detailed information about a project than GET api.elevenlabs.io/v1/projects.
         * @summary Get Project By Id
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectByIDV1ProjectsProjectIdGet(projectId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectExtendedResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectByIDV1ProjectsProjectIdGet(projectId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the snapshots of a project.
         * @summary Get Project Snapshots
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectSnapshotsV1ProjectsProjectIdSnapshotsGet(projectId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectSnapshotsResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectSnapshotsV1ProjectsProjectIdSnapshotsGet(projectId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of your projects together and its metadata.
         * @summary Get Projects
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectsV1ProjectsGet(xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProjectsResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectsV1ProjectsGet(xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Stream the audio from a chapter snapshot. Use GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to return the chapter snapshots of a chapter.
         * @summary Stream Chapter Audio
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
         * @param {string} chapterSnapshotId The chapter_snapshot_id of the chapter snapshot. You can query GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to the all available snapshots for a chapter.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost(projectId: string, chapterId: string, chapterSnapshotId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost(projectId, chapterId, chapterSnapshotId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Stream the audio from a project snapshot.
         * @summary Stream Project Audio
         * @param {string} projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
         * @param {string} projectSnapshotId The project_snapshot_id of the project snapshot. You can query GET /v1/projects/{project_id}/snapshots to list all available snapshots for a project.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost(projectId: string, projectSnapshotId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost(projectId, projectSnapshotId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * Creates a new project, it can be either initialized as blank, from a document or from a URL.
         * @summary Add Project
         * @param {ProjectsApiAddProjectV1ProjectsAddPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProjectV1ProjectsAddPost(requestParameters: ProjectsApiAddProjectV1ProjectsAddPostRequest, options?: AxiosRequestConfig): AxiosPromise<AddProjectResponseModel> {
            return localVarFp.addProjectV1ProjectsAddPost(requestParameters.name, requestParameters.defaultTitleVoiceId, requestParameters.defaultParagraphVoiceId, requestParameters.defaultModelId, requestParameters.xiApiKey, requestParameters.fromUrl, requestParameters.fromDocument, requestParameters.qualityPreset, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts conversion of a specific chapter.
         * @summary Convert Chapter
         * @param {ProjectsApiConvertChapterV1ProjectsProjectIdChaptersChapterIdConvertPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertChapterV1ProjectsProjectIdChaptersChapterIdConvertPost(requestParameters: ProjectsApiConvertChapterV1ProjectsProjectIdChaptersChapterIdConvertPostRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.convertChapterV1ProjectsProjectIdChaptersChapterIdConvertPost(requestParameters.projectId, requestParameters.chapterId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts conversion of a project and all of its chapters.
         * @summary Convert Project
         * @param {ProjectsApiConvertProjectV1ProjectsProjectIdConvertPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertProjectV1ProjectsProjectIdConvertPost(requestParameters: ProjectsApiConvertProjectV1ProjectsProjectIdConvertPostRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.convertProjectV1ProjectsProjectIdConvertPost(requestParameters.projectId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a chapter by its chapter_id.
         * @summary Delete Chapter
         * @param {ProjectsApiDeleteChapterV1ProjectsProjectIdChaptersChapterIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChapterV1ProjectsProjectIdChaptersChapterIdDelete(requestParameters: ProjectsApiDeleteChapterV1ProjectsProjectIdChaptersChapterIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteChapterV1ProjectsProjectIdChaptersChapterIdDelete(requestParameters.projectId, requestParameters.chapterId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a project by its project_id.
         * @summary Delete Project
         * @param {ProjectsApiDeleteProjectV1ProjectsProjectIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectV1ProjectsProjectIdDelete(requestParameters: ProjectsApiDeleteProjectV1ProjectsProjectIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteProjectV1ProjectsProjectIdDelete(requestParameters.projectId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about a specific chapter.
         * @summary Get Chapter By Id
         * @param {ProjectsApiGetChapterByIDV1ProjectsProjectIdChaptersChapterIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapterByIDV1ProjectsProjectIdChaptersChapterIdGet(requestParameters: ProjectsApiGetChapterByIDV1ProjectsProjectIdChaptersChapterIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<ChapterResponseModel> {
            return localVarFp.getChapterByIDV1ProjectsProjectIdChaptersChapterIdGet(requestParameters.projectId, requestParameters.chapterId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets information about all the snapshots of a chapter, each snapshot corresponds can be downloaded as audio. Whenever a chapter is converted a snapshot will be automatically created.
         * @summary Get Chapter Snapshots
         * @param {ProjectsApiGetChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGet(requestParameters: ProjectsApiGetChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGetRequest, options?: AxiosRequestConfig): AxiosPromise<ChapterSnapshotsResponseModel> {
            return localVarFp.getChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGet(requestParameters.projectId, requestParameters.chapterId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of your chapters for a project together and its metadata.
         * @summary Get Chapters
         * @param {ProjectsApiGetChaptersV1ProjectsProjectIdChaptersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChaptersV1ProjectsProjectIdChaptersGet(requestParameters: ProjectsApiGetChaptersV1ProjectsProjectIdChaptersGetRequest, options?: AxiosRequestConfig): AxiosPromise<GetChaptersResponseModel> {
            return localVarFp.getChaptersV1ProjectsProjectIdChaptersGet(requestParameters.projectId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about a specific project. This endpoint returns more detailed information about a project than GET api.elevenlabs.io/v1/projects.
         * @summary Get Project By Id
         * @param {ProjectsApiGetProjectByIDV1ProjectsProjectIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectByIDV1ProjectsProjectIdGet(requestParameters: ProjectsApiGetProjectByIDV1ProjectsProjectIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectExtendedResponseModel> {
            return localVarFp.getProjectByIDV1ProjectsProjectIdGet(requestParameters.projectId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the snapshots of a project.
         * @summary Get Project Snapshots
         * @param {ProjectsApiGetProjectSnapshotsV1ProjectsProjectIdSnapshotsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSnapshotsV1ProjectsProjectIdSnapshotsGet(requestParameters: ProjectsApiGetProjectSnapshotsV1ProjectsProjectIdSnapshotsGetRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectSnapshotsResponseModel> {
            return localVarFp.getProjectSnapshotsV1ProjectsProjectIdSnapshotsGet(requestParameters.projectId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of your projects together and its metadata.
         * @summary Get Projects
         * @param {ProjectsApiGetProjectsV1ProjectsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsV1ProjectsGet(requestParameters: ProjectsApiGetProjectsV1ProjectsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetProjectsResponseModel> {
            return localVarFp.getProjectsV1ProjectsGet(requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Stream the audio from a chapter snapshot. Use GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to return the chapter snapshots of a chapter.
         * @summary Stream Chapter Audio
         * @param {ProjectsApiStreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost(requestParameters: ProjectsApiStreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPostRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.streamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost(requestParameters.projectId, requestParameters.chapterId, requestParameters.chapterSnapshotId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Stream the audio from a project snapshot.
         * @summary Stream Project Audio
         * @param {ProjectsApiStreamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost(requestParameters: ProjectsApiStreamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPostRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.streamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost(requestParameters.projectId, requestParameters.projectSnapshotId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addProjectV1ProjectsAddPost operation in ProjectsApi.
 * @export
 * @interface ProjectsApiAddProjectV1ProjectsAddPostRequest
 */
export interface ProjectsApiAddProjectV1ProjectsAddPostRequest {
    /**
     * The name of the project, used for identification only.
     * @type {string}
     * @memberof ProjectsApiAddProjectV1ProjectsAddPost
     */
    readonly name: string

    /**
     * The voice_id that corresponds to the default voice used for new titles.
     * @type {string}
     * @memberof ProjectsApiAddProjectV1ProjectsAddPost
     */
    readonly defaultTitleVoiceId: string

    /**
     * The voice_id that corresponds to the default voice used for new paragraphs.
     * @type {string}
     * @memberof ProjectsApiAddProjectV1ProjectsAddPost
     */
    readonly defaultParagraphVoiceId: string

    /**
     * The model_id of the model to be used for this project, you can query GET https://api.elevenlabs.io/v1/models to list all available models.
     * @type {string}
     * @memberof ProjectsApiAddProjectV1ProjectsAddPost
     */
    readonly defaultModelId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof ProjectsApiAddProjectV1ProjectsAddPost
     */
    readonly xiApiKey?: string

    /**
     * An optional URL from which we will extract content to initialize the project. If this is set, \\\&#39;from_url\\\&#39; must be null. If neither \\\&#39;from_url\\\&#39; or \\\&#39;from_document\\\&#39; are provided we will initialize the project as blank.
     * @type {string}
     * @memberof ProjectsApiAddProjectV1ProjectsAddPost
     */
    readonly fromUrl?: string

    /**
     * An optional .epub, .pdf, .txt or similar file can be provided. If provided, we will initialize the project with its content. If this is set, \\\&#39;from_url\\\&#39; must be null.  If neither \\\&#39;from_url\\\&#39; or \\\&#39;from_document\\\&#39; are provided we will initialize the project as blank.
     * @type {File}
     * @memberof ProjectsApiAddProjectV1ProjectsAddPost
     */
    readonly fromDocument?: File

    /**
     * Output quality of the generated audio. Must be one of: standard - standard output format, 128kbps with 44.1kHz sample rate. high - high quality output format, 192kbps with 44.1kHz sample rate and major improvements on our side. Using this setting increases the character cost by 20%. ultra - ultra quality output format, 192kbps with 44.1kHz sample rate and highest improvements on our side. Using this setting increases the character cost by 50%. 
     * @type {string}
     * @memberof ProjectsApiAddProjectV1ProjectsAddPost
     */
    readonly qualityPreset?: string
}

/**
 * Request parameters for convertChapterV1ProjectsProjectIdChaptersChapterIdConvertPost operation in ProjectsApi.
 * @export
 * @interface ProjectsApiConvertChapterV1ProjectsProjectIdChaptersChapterIdConvertPostRequest
 */
export interface ProjectsApiConvertChapterV1ProjectsProjectIdChaptersChapterIdConvertPostRequest {
    /**
     * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
     * @type {string}
     * @memberof ProjectsApiConvertChapterV1ProjectsProjectIdChaptersChapterIdConvertPost
     */
    readonly projectId: string

    /**
     * The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
     * @type {string}
     * @memberof ProjectsApiConvertChapterV1ProjectsProjectIdChaptersChapterIdConvertPost
     */
    readonly chapterId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof ProjectsApiConvertChapterV1ProjectsProjectIdChaptersChapterIdConvertPost
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for convertProjectV1ProjectsProjectIdConvertPost operation in ProjectsApi.
 * @export
 * @interface ProjectsApiConvertProjectV1ProjectsProjectIdConvertPostRequest
 */
export interface ProjectsApiConvertProjectV1ProjectsProjectIdConvertPostRequest {
    /**
     * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
     * @type {string}
     * @memberof ProjectsApiConvertProjectV1ProjectsProjectIdConvertPost
     */
    readonly projectId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof ProjectsApiConvertProjectV1ProjectsProjectIdConvertPost
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for deleteChapterV1ProjectsProjectIdChaptersChapterIdDelete operation in ProjectsApi.
 * @export
 * @interface ProjectsApiDeleteChapterV1ProjectsProjectIdChaptersChapterIdDeleteRequest
 */
export interface ProjectsApiDeleteChapterV1ProjectsProjectIdChaptersChapterIdDeleteRequest {
    /**
     * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
     * @type {string}
     * @memberof ProjectsApiDeleteChapterV1ProjectsProjectIdChaptersChapterIdDelete
     */
    readonly projectId: string

    /**
     * The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
     * @type {string}
     * @memberof ProjectsApiDeleteChapterV1ProjectsProjectIdChaptersChapterIdDelete
     */
    readonly chapterId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof ProjectsApiDeleteChapterV1ProjectsProjectIdChaptersChapterIdDelete
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for deleteProjectV1ProjectsProjectIdDelete operation in ProjectsApi.
 * @export
 * @interface ProjectsApiDeleteProjectV1ProjectsProjectIdDeleteRequest
 */
export interface ProjectsApiDeleteProjectV1ProjectsProjectIdDeleteRequest {
    /**
     * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
     * @type {string}
     * @memberof ProjectsApiDeleteProjectV1ProjectsProjectIdDelete
     */
    readonly projectId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof ProjectsApiDeleteProjectV1ProjectsProjectIdDelete
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for getChapterByIDV1ProjectsProjectIdChaptersChapterIdGet operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetChapterByIDV1ProjectsProjectIdChaptersChapterIdGetRequest
 */
export interface ProjectsApiGetChapterByIDV1ProjectsProjectIdChaptersChapterIdGetRequest {
    /**
     * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
     * @type {string}
     * @memberof ProjectsApiGetChapterByIDV1ProjectsProjectIdChaptersChapterIdGet
     */
    readonly projectId: string

    /**
     * The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
     * @type {string}
     * @memberof ProjectsApiGetChapterByIDV1ProjectsProjectIdChaptersChapterIdGet
     */
    readonly chapterId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof ProjectsApiGetChapterByIDV1ProjectsProjectIdChaptersChapterIdGet
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for getChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGet operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGetRequest
 */
export interface ProjectsApiGetChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGetRequest {
    /**
     * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
     * @type {string}
     * @memberof ProjectsApiGetChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGet
     */
    readonly projectId: string

    /**
     * The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
     * @type {string}
     * @memberof ProjectsApiGetChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGet
     */
    readonly chapterId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof ProjectsApiGetChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGet
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for getChaptersV1ProjectsProjectIdChaptersGet operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetChaptersV1ProjectsProjectIdChaptersGetRequest
 */
export interface ProjectsApiGetChaptersV1ProjectsProjectIdChaptersGetRequest {
    /**
     * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
     * @type {string}
     * @memberof ProjectsApiGetChaptersV1ProjectsProjectIdChaptersGet
     */
    readonly projectId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof ProjectsApiGetChaptersV1ProjectsProjectIdChaptersGet
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for getProjectByIDV1ProjectsProjectIdGet operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectByIDV1ProjectsProjectIdGetRequest
 */
export interface ProjectsApiGetProjectByIDV1ProjectsProjectIdGetRequest {
    /**
     * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
     * @type {string}
     * @memberof ProjectsApiGetProjectByIDV1ProjectsProjectIdGet
     */
    readonly projectId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof ProjectsApiGetProjectByIDV1ProjectsProjectIdGet
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for getProjectSnapshotsV1ProjectsProjectIdSnapshotsGet operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectSnapshotsV1ProjectsProjectIdSnapshotsGetRequest
 */
export interface ProjectsApiGetProjectSnapshotsV1ProjectsProjectIdSnapshotsGetRequest {
    /**
     * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
     * @type {string}
     * @memberof ProjectsApiGetProjectSnapshotsV1ProjectsProjectIdSnapshotsGet
     */
    readonly projectId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof ProjectsApiGetProjectSnapshotsV1ProjectsProjectIdSnapshotsGet
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for getProjectsV1ProjectsGet operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectsV1ProjectsGetRequest
 */
export interface ProjectsApiGetProjectsV1ProjectsGetRequest {
    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof ProjectsApiGetProjectsV1ProjectsGet
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for streamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost operation in ProjectsApi.
 * @export
 * @interface ProjectsApiStreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPostRequest
 */
export interface ProjectsApiStreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPostRequest {
    /**
     * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
     * @type {string}
     * @memberof ProjectsApiStreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost
     */
    readonly projectId: string

    /**
     * The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project.
     * @type {string}
     * @memberof ProjectsApiStreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost
     */
    readonly chapterId: string

    /**
     * The chapter_snapshot_id of the chapter snapshot. You can query GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to the all available snapshots for a chapter.
     * @type {string}
     * @memberof ProjectsApiStreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost
     */
    readonly chapterSnapshotId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof ProjectsApiStreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for streamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost operation in ProjectsApi.
 * @export
 * @interface ProjectsApiStreamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPostRequest
 */
export interface ProjectsApiStreamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPostRequest {
    /**
     * The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
     * @type {string}
     * @memberof ProjectsApiStreamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost
     */
    readonly projectId: string

    /**
     * The project_snapshot_id of the project snapshot. You can query GET /v1/projects/{project_id}/snapshots to list all available snapshots for a project.
     * @type {string}
     * @memberof ProjectsApiStreamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost
     */
    readonly projectSnapshotId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof ProjectsApiStreamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost
     */
    readonly xiApiKey?: string
}

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * Creates a new project, it can be either initialized as blank, from a document or from a URL.
     * @summary Add Project
     * @param {ProjectsApiAddProjectV1ProjectsAddPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public addProjectV1ProjectsAddPost(requestParameters: ProjectsApiAddProjectV1ProjectsAddPostRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).addProjectV1ProjectsAddPost(requestParameters.name, requestParameters.defaultTitleVoiceId, requestParameters.defaultParagraphVoiceId, requestParameters.defaultModelId, requestParameters.xiApiKey, requestParameters.fromUrl, requestParameters.fromDocument, requestParameters.qualityPreset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Starts conversion of a specific chapter.
     * @summary Convert Chapter
     * @param {ProjectsApiConvertChapterV1ProjectsProjectIdChaptersChapterIdConvertPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public convertChapterV1ProjectsProjectIdChaptersChapterIdConvertPost(requestParameters: ProjectsApiConvertChapterV1ProjectsProjectIdChaptersChapterIdConvertPostRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).convertChapterV1ProjectsProjectIdChaptersChapterIdConvertPost(requestParameters.projectId, requestParameters.chapterId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Starts conversion of a project and all of its chapters.
     * @summary Convert Project
     * @param {ProjectsApiConvertProjectV1ProjectsProjectIdConvertPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public convertProjectV1ProjectsProjectIdConvertPost(requestParameters: ProjectsApiConvertProjectV1ProjectsProjectIdConvertPostRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).convertProjectV1ProjectsProjectIdConvertPost(requestParameters.projectId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a chapter by its chapter_id.
     * @summary Delete Chapter
     * @param {ProjectsApiDeleteChapterV1ProjectsProjectIdChaptersChapterIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteChapterV1ProjectsProjectIdChaptersChapterIdDelete(requestParameters: ProjectsApiDeleteChapterV1ProjectsProjectIdChaptersChapterIdDeleteRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).deleteChapterV1ProjectsProjectIdChaptersChapterIdDelete(requestParameters.projectId, requestParameters.chapterId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a project by its project_id.
     * @summary Delete Project
     * @param {ProjectsApiDeleteProjectV1ProjectsProjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteProjectV1ProjectsProjectIdDelete(requestParameters: ProjectsApiDeleteProjectV1ProjectsProjectIdDeleteRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).deleteProjectV1ProjectsProjectIdDelete(requestParameters.projectId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about a specific chapter.
     * @summary Get Chapter By Id
     * @param {ProjectsApiGetChapterByIDV1ProjectsProjectIdChaptersChapterIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getChapterByIDV1ProjectsProjectIdChaptersChapterIdGet(requestParameters: ProjectsApiGetChapterByIDV1ProjectsProjectIdChaptersChapterIdGetRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getChapterByIDV1ProjectsProjectIdChaptersChapterIdGet(requestParameters.projectId, requestParameters.chapterId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets information about all the snapshots of a chapter, each snapshot corresponds can be downloaded as audio. Whenever a chapter is converted a snapshot will be automatically created.
     * @summary Get Chapter Snapshots
     * @param {ProjectsApiGetChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGet(requestParameters: ProjectsApiGetChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGetRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGet(requestParameters.projectId, requestParameters.chapterId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of your chapters for a project together and its metadata.
     * @summary Get Chapters
     * @param {ProjectsApiGetChaptersV1ProjectsProjectIdChaptersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getChaptersV1ProjectsProjectIdChaptersGet(requestParameters: ProjectsApiGetChaptersV1ProjectsProjectIdChaptersGetRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getChaptersV1ProjectsProjectIdChaptersGet(requestParameters.projectId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about a specific project. This endpoint returns more detailed information about a project than GET api.elevenlabs.io/v1/projects.
     * @summary Get Project By Id
     * @param {ProjectsApiGetProjectByIDV1ProjectsProjectIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectByIDV1ProjectsProjectIdGet(requestParameters: ProjectsApiGetProjectByIDV1ProjectsProjectIdGetRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getProjectByIDV1ProjectsProjectIdGet(requestParameters.projectId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the snapshots of a project.
     * @summary Get Project Snapshots
     * @param {ProjectsApiGetProjectSnapshotsV1ProjectsProjectIdSnapshotsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectSnapshotsV1ProjectsProjectIdSnapshotsGet(requestParameters: ProjectsApiGetProjectSnapshotsV1ProjectsProjectIdSnapshotsGetRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getProjectSnapshotsV1ProjectsProjectIdSnapshotsGet(requestParameters.projectId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of your projects together and its metadata.
     * @summary Get Projects
     * @param {ProjectsApiGetProjectsV1ProjectsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectsV1ProjectsGet(requestParameters: ProjectsApiGetProjectsV1ProjectsGetRequest = {}, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getProjectsV1ProjectsGet(requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stream the audio from a chapter snapshot. Use GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to return the chapter snapshots of a chapter.
     * @summary Stream Chapter Audio
     * @param {ProjectsApiStreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public streamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost(requestParameters: ProjectsApiStreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPostRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).streamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost(requestParameters.projectId, requestParameters.chapterId, requestParameters.chapterSnapshotId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stream the audio from a project snapshot.
     * @summary Stream Project Audio
     * @param {ProjectsApiStreamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public streamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost(requestParameters: ProjectsApiStreamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPostRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).streamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost(requestParameters.projectId, requestParameters.projectSnapshotId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SamplesApi - axios parameter creator
 * @export
 */
export const SamplesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes a sample by its ID.
         * @summary Delete Sample
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {string} sampleId Sample ID to be used, you can use GET https://api.elevenlabs.io/v1/voices/{voice_id} to list all the available samples for a voice.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSampleV1VoicesVoiceIdSamplesSampleIdDelete: async (voiceId: string, sampleId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('deleteSampleV1VoicesVoiceIdSamplesSampleIdDelete', 'voiceId', voiceId)
            // verify required parameter 'sampleId' is not null or undefined
            assertParamExists('deleteSampleV1VoicesVoiceIdSamplesSampleIdDelete', 'sampleId', sampleId)
            const localVarPath = `/v1/voices/{voice_id}/samples/{sample_id}`
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId)))
                .replace(`{${"sample_id"}}`, encodeURIComponent(String(sampleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the audio corresponding to a sample attached to a voice.
         * @summary Get Audio From Sample
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {string} sampleId Sample ID to be used, you can use GET https://api.elevenlabs.io/v1/voices/{voice_id} to list all the available samples for a voice.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet: async (voiceId: string, sampleId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('getAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet', 'voiceId', voiceId)
            // verify required parameter 'sampleId' is not null or undefined
            assertParamExists('getAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet', 'sampleId', sampleId)
            const localVarPath = `/v1/voices/{voice_id}/samples/{sample_id}/audio`
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId)))
                .replace(`{${"sample_id"}}`, encodeURIComponent(String(sampleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SamplesApi - functional programming interface
 * @export
 */
export const SamplesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SamplesApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes a sample by its ID.
         * @summary Delete Sample
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {string} sampleId Sample ID to be used, you can use GET https://api.elevenlabs.io/v1/voices/{voice_id} to list all the available samples for a voice.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSampleV1VoicesVoiceIdSamplesSampleIdDelete(voiceId: string, sampleId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSampleV1VoicesVoiceIdSamplesSampleIdDelete(voiceId, sampleId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the audio corresponding to a sample attached to a voice.
         * @summary Get Audio From Sample
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {string} sampleId Sample ID to be used, you can use GET https://api.elevenlabs.io/v1/voices/{voice_id} to list all the available samples for a voice.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet(voiceId: string, sampleId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet(voiceId, sampleId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SamplesApi - factory interface
 * @export
 */
export const SamplesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SamplesApiFp(configuration)
    return {
        /**
         * Removes a sample by its ID.
         * @summary Delete Sample
         * @param {SamplesApiDeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSampleV1VoicesVoiceIdSamplesSampleIdDelete(requestParameters: SamplesApiDeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteSampleV1VoicesVoiceIdSamplesSampleIdDelete(requestParameters.voiceId, requestParameters.sampleId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the audio corresponding to a sample attached to a voice.
         * @summary Get Audio From Sample
         * @param {SamplesApiGetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet(requestParameters: SamplesApiGetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet(requestParameters.voiceId, requestParameters.sampleId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteSampleV1VoicesVoiceIdSamplesSampleIdDelete operation in SamplesApi.
 * @export
 * @interface SamplesApiDeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteRequest
 */
export interface SamplesApiDeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteRequest {
    /**
     * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
     * @type {string}
     * @memberof SamplesApiDeleteSampleV1VoicesVoiceIdSamplesSampleIdDelete
     */
    readonly voiceId: string

    /**
     * Sample ID to be used, you can use GET https://api.elevenlabs.io/v1/voices/{voice_id} to list all the available samples for a voice.
     * @type {string}
     * @memberof SamplesApiDeleteSampleV1VoicesVoiceIdSamplesSampleIdDelete
     */
    readonly sampleId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof SamplesApiDeleteSampleV1VoicesVoiceIdSamplesSampleIdDelete
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for getAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet operation in SamplesApi.
 * @export
 * @interface SamplesApiGetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetRequest
 */
export interface SamplesApiGetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetRequest {
    /**
     * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
     * @type {string}
     * @memberof SamplesApiGetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet
     */
    readonly voiceId: string

    /**
     * Sample ID to be used, you can use GET https://api.elevenlabs.io/v1/voices/{voice_id} to list all the available samples for a voice.
     * @type {string}
     * @memberof SamplesApiGetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet
     */
    readonly sampleId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof SamplesApiGetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet
     */
    readonly xiApiKey?: string
}

/**
 * SamplesApi - object-oriented interface
 * @export
 * @class SamplesApi
 * @extends {BaseAPI}
 */
export class SamplesApi extends BaseAPI {
    /**
     * Removes a sample by its ID.
     * @summary Delete Sample
     * @param {SamplesApiDeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SamplesApi
     */
    public deleteSampleV1VoicesVoiceIdSamplesSampleIdDelete(requestParameters: SamplesApiDeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteRequest, options?: AxiosRequestConfig) {
        return SamplesApiFp(this.configuration).deleteSampleV1VoicesVoiceIdSamplesSampleIdDelete(requestParameters.voiceId, requestParameters.sampleId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the audio corresponding to a sample attached to a voice.
     * @summary Get Audio From Sample
     * @param {SamplesApiGetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SamplesApi
     */
    public getAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet(requestParameters: SamplesApiGetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetRequest, options?: AxiosRequestConfig) {
        return SamplesApiFp(this.configuration).getAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet(requestParameters.voiceId, requestParameters.sampleId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TextToSpeechApi - axios parameter creator
 * @export
 */
export const TextToSpeechApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Converts text into speech using a voice of your choice and returns audio.
         * @summary Text To Speech
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {BodyTextToSpeechV1TextToSpeechVoiceIdPost} bodyTextToSpeechV1TextToSpeechVoiceIdPost 
         * @param {number} [optimizeStreamingLatency] You can turn on latency optimizations at some cost of quality. The best possible final latency varies by model. Possible values: 0 - default mode (no latency optimizations) 1 - normal latency optimizations (about 50% of possible latency improvement of option 3) 2 - strong latency optimizations (about 75% of possible latency improvement of option 3) 3 - max latency optimizations 4 - max latency optimizations, but also with text normalizer turned off for even more latency savings (best latency, but can mispronounce eg numbers and dates).  Defaults to 0. 
         * @param {string} [outputFormat] Output format of the generated audio. Must be one of: mp3_44100_64 - output format, mp3 with 44.1kHz sample rate at 64kbps. mp3_44100_96 - output format, mp3 with 44.1kHz sample rate at 96kbps. mp3_44100_128 - default output format, mp3 with 44.1kHz sample rate at 128kbps. mp3_44100_192 - output format, mp3 with 44.1kHz sample rate at 192kbps. Requires you to be subscribed to Creator tier or above. pcm_16000 - PCM format (S16LE) with 16kHz sample rate. pcm_22050 - PCM format (S16LE) with 22.05kHz sample rate. pcm_24000 - PCM format (S16LE) with 24kHz sample rate. pcm_44100 - PCM format (S16LE) with 44.1kHz sample rate. Requires you to be subscribed to Independent Publisher tier or above. 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textToSpeechV1TextToSpeechVoiceIdPost: async (voiceId: string, bodyTextToSpeechV1TextToSpeechVoiceIdPost: BodyTextToSpeechV1TextToSpeechVoiceIdPost, optimizeStreamingLatency?: number, outputFormat?: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('textToSpeechV1TextToSpeechVoiceIdPost', 'voiceId', voiceId)
            // verify required parameter 'bodyTextToSpeechV1TextToSpeechVoiceIdPost' is not null or undefined
            assertParamExists('textToSpeechV1TextToSpeechVoiceIdPost', 'bodyTextToSpeechV1TextToSpeechVoiceIdPost', bodyTextToSpeechV1TextToSpeechVoiceIdPost)
            const localVarPath = `/v1/text-to-speech/{voice_id}`
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (optimizeStreamingLatency !== undefined) {
                localVarQueryParameter['optimize_streaming_latency'] = optimizeStreamingLatency;
            }

            if (outputFormat !== undefined) {
                localVarQueryParameter['output_format'] = outputFormat;
            }

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyTextToSpeechV1TextToSpeechVoiceIdPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Converts text into speech using a voice of your choice and returns audio as an audio stream.
         * @summary Text To Speech
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost} bodyTextToSpeechV1TextToSpeechVoiceIdStreamPost 
         * @param {number} [optimizeStreamingLatency] You can turn on latency optimizations at some cost of quality. The best possible final latency varies by model. Possible values: 0 - default mode (no latency optimizations) 1 - normal latency optimizations (about 50% of possible latency improvement of option 3) 2 - strong latency optimizations (about 75% of possible latency improvement of option 3) 3 - max latency optimizations 4 - max latency optimizations, but also with text normalizer turned off for even more latency savings (best latency, but can mispronounce eg numbers and dates).  Defaults to 0. 
         * @param {string} [outputFormat] Output format of the generated audio. Must be one of: mp3_44100_64 - output format, mp3 with 44.1kHz sample rate at 64kbps. mp3_44100_96 - output format, mp3 with 44.1kHz sample rate at 96kbps. mp3_44100_128 - default output format, mp3 with 44.1kHz sample rate at 128kbps. mp3_44100_192 - output format, mp3 with 44.1kHz sample rate at 192kbps. Requires you to be subscribed to Creator tier or above. pcm_16000 - PCM format (S16LE) with 16kHz sample rate. pcm_22050 - PCM format (S16LE) with 22.05kHz sample rate. pcm_24000 - PCM format (S16LE) with 24kHz sample rate. pcm_44100 - PCM format (S16LE) with 44.1kHz sample rate. Requires you to be subscribed to Independent Publisher tier or above. 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textToSpeechV1TextToSpeechVoiceIdStreamPost: async (voiceId: string, bodyTextToSpeechV1TextToSpeechVoiceIdStreamPost: BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost, optimizeStreamingLatency?: number, outputFormat?: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('textToSpeechV1TextToSpeechVoiceIdStreamPost', 'voiceId', voiceId)
            // verify required parameter 'bodyTextToSpeechV1TextToSpeechVoiceIdStreamPost' is not null or undefined
            assertParamExists('textToSpeechV1TextToSpeechVoiceIdStreamPost', 'bodyTextToSpeechV1TextToSpeechVoiceIdStreamPost', bodyTextToSpeechV1TextToSpeechVoiceIdStreamPost)
            const localVarPath = `/v1/text-to-speech/{voice_id}/stream`
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (optimizeStreamingLatency !== undefined) {
                localVarQueryParameter['optimize_streaming_latency'] = optimizeStreamingLatency;
            }

            if (outputFormat !== undefined) {
                localVarQueryParameter['output_format'] = outputFormat;
            }

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyTextToSpeechV1TextToSpeechVoiceIdStreamPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TextToSpeechApi - functional programming interface
 * @export
 */
export const TextToSpeechApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TextToSpeechApiAxiosParamCreator(configuration)
    return {
        /**
         * Converts text into speech using a voice of your choice and returns audio.
         * @summary Text To Speech
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {BodyTextToSpeechV1TextToSpeechVoiceIdPost} bodyTextToSpeechV1TextToSpeechVoiceIdPost 
         * @param {number} [optimizeStreamingLatency] You can turn on latency optimizations at some cost of quality. The best possible final latency varies by model. Possible values: 0 - default mode (no latency optimizations) 1 - normal latency optimizations (about 50% of possible latency improvement of option 3) 2 - strong latency optimizations (about 75% of possible latency improvement of option 3) 3 - max latency optimizations 4 - max latency optimizations, but also with text normalizer turned off for even more latency savings (best latency, but can mispronounce eg numbers and dates).  Defaults to 0. 
         * @param {string} [outputFormat] Output format of the generated audio. Must be one of: mp3_44100_64 - output format, mp3 with 44.1kHz sample rate at 64kbps. mp3_44100_96 - output format, mp3 with 44.1kHz sample rate at 96kbps. mp3_44100_128 - default output format, mp3 with 44.1kHz sample rate at 128kbps. mp3_44100_192 - output format, mp3 with 44.1kHz sample rate at 192kbps. Requires you to be subscribed to Creator tier or above. pcm_16000 - PCM format (S16LE) with 16kHz sample rate. pcm_22050 - PCM format (S16LE) with 22.05kHz sample rate. pcm_24000 - PCM format (S16LE) with 24kHz sample rate. pcm_44100 - PCM format (S16LE) with 44.1kHz sample rate. Requires you to be subscribed to Independent Publisher tier or above. 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textToSpeechV1TextToSpeechVoiceIdPost(voiceId: string, bodyTextToSpeechV1TextToSpeechVoiceIdPost: BodyTextToSpeechV1TextToSpeechVoiceIdPost, optimizeStreamingLatency?: number, outputFormat?: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textToSpeechV1TextToSpeechVoiceIdPost(voiceId, bodyTextToSpeechV1TextToSpeechVoiceIdPost, optimizeStreamingLatency, outputFormat, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Converts text into speech using a voice of your choice and returns audio as an audio stream.
         * @summary Text To Speech
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost} bodyTextToSpeechV1TextToSpeechVoiceIdStreamPost 
         * @param {number} [optimizeStreamingLatency] You can turn on latency optimizations at some cost of quality. The best possible final latency varies by model. Possible values: 0 - default mode (no latency optimizations) 1 - normal latency optimizations (about 50% of possible latency improvement of option 3) 2 - strong latency optimizations (about 75% of possible latency improvement of option 3) 3 - max latency optimizations 4 - max latency optimizations, but also with text normalizer turned off for even more latency savings (best latency, but can mispronounce eg numbers and dates).  Defaults to 0. 
         * @param {string} [outputFormat] Output format of the generated audio. Must be one of: mp3_44100_64 - output format, mp3 with 44.1kHz sample rate at 64kbps. mp3_44100_96 - output format, mp3 with 44.1kHz sample rate at 96kbps. mp3_44100_128 - default output format, mp3 with 44.1kHz sample rate at 128kbps. mp3_44100_192 - output format, mp3 with 44.1kHz sample rate at 192kbps. Requires you to be subscribed to Creator tier or above. pcm_16000 - PCM format (S16LE) with 16kHz sample rate. pcm_22050 - PCM format (S16LE) with 22.05kHz sample rate. pcm_24000 - PCM format (S16LE) with 24kHz sample rate. pcm_44100 - PCM format (S16LE) with 44.1kHz sample rate. Requires you to be subscribed to Independent Publisher tier or above. 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textToSpeechV1TextToSpeechVoiceIdStreamPost(voiceId: string, bodyTextToSpeechV1TextToSpeechVoiceIdStreamPost: BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost, optimizeStreamingLatency?: number, outputFormat?: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textToSpeechV1TextToSpeechVoiceIdStreamPost(voiceId, bodyTextToSpeechV1TextToSpeechVoiceIdStreamPost, optimizeStreamingLatency, outputFormat, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TextToSpeechApi - factory interface
 * @export
 */
export const TextToSpeechApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TextToSpeechApiFp(configuration)
    return {
        /**
         * Converts text into speech using a voice of your choice and returns audio.
         * @summary Text To Speech
         * @param {TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textToSpeechV1TextToSpeechVoiceIdPost(requestParameters: TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdPostRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.textToSpeechV1TextToSpeechVoiceIdPost(requestParameters.voiceId, requestParameters.bodyTextToSpeechV1TextToSpeechVoiceIdPost, requestParameters.optimizeStreamingLatency, requestParameters.outputFormat, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Converts text into speech using a voice of your choice and returns audio as an audio stream.
         * @summary Text To Speech
         * @param {TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdStreamPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textToSpeechV1TextToSpeechVoiceIdStreamPost(requestParameters: TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdStreamPostRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.textToSpeechV1TextToSpeechVoiceIdStreamPost(requestParameters.voiceId, requestParameters.bodyTextToSpeechV1TextToSpeechVoiceIdStreamPost, requestParameters.optimizeStreamingLatency, requestParameters.outputFormat, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for textToSpeechV1TextToSpeechVoiceIdPost operation in TextToSpeechApi.
 * @export
 * @interface TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdPostRequest
 */
export interface TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdPostRequest {
    /**
     * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
     * @type {string}
     * @memberof TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdPost
     */
    readonly voiceId: string

    /**
     * 
     * @type {BodyTextToSpeechV1TextToSpeechVoiceIdPost}
     * @memberof TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdPost
     */
    readonly bodyTextToSpeechV1TextToSpeechVoiceIdPost: BodyTextToSpeechV1TextToSpeechVoiceIdPost

    /**
     * You can turn on latency optimizations at some cost of quality. The best possible final latency varies by model. Possible values: 0 - default mode (no latency optimizations) 1 - normal latency optimizations (about 50% of possible latency improvement of option 3) 2 - strong latency optimizations (about 75% of possible latency improvement of option 3) 3 - max latency optimizations 4 - max latency optimizations, but also with text normalizer turned off for even more latency savings (best latency, but can mispronounce eg numbers and dates).  Defaults to 0. 
     * @type {number}
     * @memberof TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdPost
     */
    readonly optimizeStreamingLatency?: number

    /**
     * Output format of the generated audio. Must be one of: mp3_44100_64 - output format, mp3 with 44.1kHz sample rate at 64kbps. mp3_44100_96 - output format, mp3 with 44.1kHz sample rate at 96kbps. mp3_44100_128 - default output format, mp3 with 44.1kHz sample rate at 128kbps. mp3_44100_192 - output format, mp3 with 44.1kHz sample rate at 192kbps. Requires you to be subscribed to Creator tier or above. pcm_16000 - PCM format (S16LE) with 16kHz sample rate. pcm_22050 - PCM format (S16LE) with 22.05kHz sample rate. pcm_24000 - PCM format (S16LE) with 24kHz sample rate. pcm_44100 - PCM format (S16LE) with 44.1kHz sample rate. Requires you to be subscribed to Independent Publisher tier or above. 
     * @type {string}
     * @memberof TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdPost
     */
    readonly outputFormat?: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdPost
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for textToSpeechV1TextToSpeechVoiceIdStreamPost operation in TextToSpeechApi.
 * @export
 * @interface TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdStreamPostRequest
 */
export interface TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdStreamPostRequest {
    /**
     * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
     * @type {string}
     * @memberof TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdStreamPost
     */
    readonly voiceId: string

    /**
     * 
     * @type {BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost}
     * @memberof TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdStreamPost
     */
    readonly bodyTextToSpeechV1TextToSpeechVoiceIdStreamPost: BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost

    /**
     * You can turn on latency optimizations at some cost of quality. The best possible final latency varies by model. Possible values: 0 - default mode (no latency optimizations) 1 - normal latency optimizations (about 50% of possible latency improvement of option 3) 2 - strong latency optimizations (about 75% of possible latency improvement of option 3) 3 - max latency optimizations 4 - max latency optimizations, but also with text normalizer turned off for even more latency savings (best latency, but can mispronounce eg numbers and dates).  Defaults to 0. 
     * @type {number}
     * @memberof TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdStreamPost
     */
    readonly optimizeStreamingLatency?: number

    /**
     * Output format of the generated audio. Must be one of: mp3_44100_64 - output format, mp3 with 44.1kHz sample rate at 64kbps. mp3_44100_96 - output format, mp3 with 44.1kHz sample rate at 96kbps. mp3_44100_128 - default output format, mp3 with 44.1kHz sample rate at 128kbps. mp3_44100_192 - output format, mp3 with 44.1kHz sample rate at 192kbps. Requires you to be subscribed to Creator tier or above. pcm_16000 - PCM format (S16LE) with 16kHz sample rate. pcm_22050 - PCM format (S16LE) with 22.05kHz sample rate. pcm_24000 - PCM format (S16LE) with 24kHz sample rate. pcm_44100 - PCM format (S16LE) with 44.1kHz sample rate. Requires you to be subscribed to Independent Publisher tier or above. 
     * @type {string}
     * @memberof TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdStreamPost
     */
    readonly outputFormat?: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdStreamPost
     */
    readonly xiApiKey?: string
}

/**
 * TextToSpeechApi - object-oriented interface
 * @export
 * @class TextToSpeechApi
 * @extends {BaseAPI}
 */
export class TextToSpeechApi extends BaseAPI {
    /**
     * Converts text into speech using a voice of your choice and returns audio.
     * @summary Text To Speech
     * @param {TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextToSpeechApi
     */
    public textToSpeechV1TextToSpeechVoiceIdPost(requestParameters: TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdPostRequest, options?: AxiosRequestConfig) {
        return TextToSpeechApiFp(this.configuration).textToSpeechV1TextToSpeechVoiceIdPost(requestParameters.voiceId, requestParameters.bodyTextToSpeechV1TextToSpeechVoiceIdPost, requestParameters.optimizeStreamingLatency, requestParameters.outputFormat, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Converts text into speech using a voice of your choice and returns audio as an audio stream.
     * @summary Text To Speech
     * @param {TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdStreamPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextToSpeechApi
     */
    public textToSpeechV1TextToSpeechVoiceIdStreamPost(requestParameters: TextToSpeechApiTextToSpeechV1TextToSpeechVoiceIdStreamPostRequest, options?: AxiosRequestConfig) {
        return TextToSpeechApiFp(this.configuration).textToSpeechV1TextToSpeechVoiceIdStreamPost(requestParameters.voiceId, requestParameters.bodyTextToSpeechV1TextToSpeechVoiceIdStreamPost, requestParameters.optimizeStreamingLatency, requestParameters.outputFormat, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets information about the user
         * @summary Get User Info
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoV1UserGet: async (xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets extended information about the users subscription
         * @summary Get User Subscription Info
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSubscriptionInfoV1UserSubscriptionGet: async (xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets information about the user
         * @summary Get User Info
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfoV1UserGet(xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInfoV1UserGet(xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets extended information about the users subscription
         * @summary Get User Subscription Info
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSubscriptionInfoV1UserSubscriptionGet(xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExtendedSubscriptionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserSubscriptionInfoV1UserSubscriptionGet(xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Gets information about the user
         * @summary Get User Info
         * @param {UserApiGetUserInfoV1UserGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoV1UserGet(requestParameters: UserApiGetUserInfoV1UserGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UserResponseModel> {
            return localVarFp.getUserInfoV1UserGet(requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets extended information about the users subscription
         * @summary Get User Subscription Info
         * @param {UserApiGetUserSubscriptionInfoV1UserSubscriptionGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSubscriptionInfoV1UserSubscriptionGet(requestParameters: UserApiGetUserSubscriptionInfoV1UserSubscriptionGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ExtendedSubscriptionResponseModel> {
            return localVarFp.getUserSubscriptionInfoV1UserSubscriptionGet(requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUserInfoV1UserGet operation in UserApi.
 * @export
 * @interface UserApiGetUserInfoV1UserGetRequest
 */
export interface UserApiGetUserInfoV1UserGetRequest {
    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof UserApiGetUserInfoV1UserGet
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for getUserSubscriptionInfoV1UserSubscriptionGet operation in UserApi.
 * @export
 * @interface UserApiGetUserSubscriptionInfoV1UserSubscriptionGetRequest
 */
export interface UserApiGetUserSubscriptionInfoV1UserSubscriptionGetRequest {
    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof UserApiGetUserSubscriptionInfoV1UserSubscriptionGet
     */
    readonly xiApiKey?: string
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Gets information about the user
     * @summary Get User Info
     * @param {UserApiGetUserInfoV1UserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserInfoV1UserGet(requestParameters: UserApiGetUserInfoV1UserGetRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserInfoV1UserGet(requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets extended information about the users subscription
     * @summary Get User Subscription Info
     * @param {UserApiGetUserSubscriptionInfoV1UserSubscriptionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserSubscriptionInfoV1UserSubscriptionGet(requestParameters: UserApiGetUserSubscriptionInfoV1UserSubscriptionGetRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserSubscriptionInfoV1UserSubscriptionGet(requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VoicesApi - axios parameter creator
 * @export
 */
export const VoicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new voice to your collection of voices in VoiceLab.
         * @summary Add Voice
         * @param {string} name The name that identifies this voice. This will be displayed in the dropdown of the website.
         * @param {Array<File>} files One or more audio files to clone the voice from
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {string} [description] How would you describe the voice?
         * @param {string} [labels] Serialized labels dictionary for the voice.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVoiceV1VoicesAddPost: async (name: string, files: Array<File>, xiApiKey?: string, description?: string, labels?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('addVoiceV1VoicesAddPost', 'name', name)
            // verify required parameter 'files' is not null or undefined
            assertParamExists('addVoiceV1VoicesAddPost', 'files', files)
            const localVarPath = `/v1/voices/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
                if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (labels !== undefined) { 
                localVarFormParams.append('labels', labels as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a voice by its ID.
         * @summary Delete Voice
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVoiceV1VoicesVoiceIdDelete: async (voiceId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('deleteVoiceV1VoicesVoiceIdDelete', 'voiceId', voiceId)
            const localVarPath = `/v1/voices/{voice_id}`
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit your settings for a specific voice. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Edit Voice Settings
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editVoiceSettingsV1VoicesVoiceIdSettingsEditPost: async (voiceId: string, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('editVoiceSettingsV1VoicesVoiceIdSettingsEditPost', 'voiceId', voiceId)
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('editVoiceSettingsV1VoicesVoiceIdSettingsEditPost', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/v1/voices/{voice_id}/settings/edit`
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit a voice created by you.
         * @summary Edit Voice
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {string} name The name that identifies this voice. This will be displayed in the dropdown of the website.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {Array<File>} [files] Audio files to add to the voice
         * @param {string} [description] How would you describe the voice?
         * @param {string} [labels] Serialized labels dictionary for the voice.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editVoiceV1VoicesVoiceIdEditPost: async (voiceId: string, name: string, xiApiKey?: string, files?: Array<File>, description?: string, labels?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('editVoiceV1VoicesVoiceIdEditPost', 'voiceId', voiceId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('editVoiceV1VoicesVoiceIdEditPost', 'name', name)
            const localVarPath = `/v1/voices/{voice_id}/edit`
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
                if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (labels !== undefined) { 
                localVarFormParams.append('labels', labels as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the default settings for voices. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Get Default Voice Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultVoiceSettingsV1VoicesSettingsDefaultGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/voices/settings/default`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the settings for a specific voice. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Get Voice Settings
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoiceSettingsV1VoicesVoiceIdSettingsGet: async (voiceId: string, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('getVoiceSettingsV1VoicesVoiceIdSettingsGet', 'voiceId', voiceId)
            const localVarPath = `/v1/voices/{voice_id}/settings`
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns metadata about a specific voice.
         * @summary Get Voice
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {boolean} [withSettings] If set will return settings information corresponding to the voice, requires authorization.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoiceV1VoicesVoiceIdGet: async (voiceId: string, withSettings?: boolean, xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('getVoiceV1VoicesVoiceIdGet', 'voiceId', voiceId)
            const localVarPath = `/v1/voices/{voice_id}`
                .replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (withSettings !== undefined) {
                localVarQueryParameter['with_settings'] = withSettings;
            }

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of all available voices for a user.
         * @summary Get Voices
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoicesV1VoicesGet: async (xiApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/voices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "xi-api-key", configuration)

            if (xiApiKey != null) {
                localVarHeaderParameter['xi-api-key'] = String(xiApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoicesApi - functional programming interface
 * @export
 */
export const VoicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VoicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new voice to your collection of voices in VoiceLab.
         * @summary Add Voice
         * @param {string} name The name that identifies this voice. This will be displayed in the dropdown of the website.
         * @param {Array<File>} files One or more audio files to clone the voice from
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {string} [description] How would you describe the voice?
         * @param {string} [labels] Serialized labels dictionary for the voice.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVoiceV1VoicesAddPost(name: string, files: Array<File>, xiApiKey?: string, description?: string, labels?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddVoiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVoiceV1VoicesAddPost(name, files, xiApiKey, description, labels, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a voice by its ID.
         * @summary Delete Voice
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVoiceV1VoicesVoiceIdDelete(voiceId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVoiceV1VoicesVoiceIdDelete(voiceId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit your settings for a specific voice. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Edit Voice Settings
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE 
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editVoiceSettingsV1VoicesVoiceIdSettingsEditPost(voiceId: string, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editVoiceSettingsV1VoicesVoiceIdSettingsEditPost(voiceId, uNKNOWNBASETYPE, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit a voice created by you.
         * @summary Edit Voice
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {string} name The name that identifies this voice. This will be displayed in the dropdown of the website.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {Array<File>} [files] Audio files to add to the voice
         * @param {string} [description] How would you describe the voice?
         * @param {string} [labels] Serialized labels dictionary for the voice.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editVoiceV1VoicesVoiceIdEditPost(voiceId: string, name: string, xiApiKey?: string, files?: Array<File>, description?: string, labels?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editVoiceV1VoicesVoiceIdEditPost(voiceId, name, xiApiKey, files, description, labels, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the default settings for voices. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Get Default Voice Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefaultVoiceSettingsV1VoicesSettingsDefaultGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoiceSettingsResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefaultVoiceSettingsV1VoicesSettingsDefaultGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the settings for a specific voice. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Get Voice Settings
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVoiceSettingsV1VoicesVoiceIdSettingsGet(voiceId: string, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoiceSettingsResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVoiceSettingsV1VoicesVoiceIdSettingsGet(voiceId, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns metadata about a specific voice.
         * @summary Get Voice
         * @param {string} voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
         * @param {boolean} [withSettings] If set will return settings information corresponding to the voice, requires authorization.
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVoiceV1VoicesVoiceIdGet(voiceId: string, withSettings?: boolean, xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVoiceV1VoicesVoiceIdGet(voiceId, withSettings, xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a list of all available voices for a user.
         * @summary Get Voices
         * @param {string} [xiApiKey] Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVoicesV1VoicesGet(xiApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVoicesResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVoicesV1VoicesGet(xiApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VoicesApi - factory interface
 * @export
 */
export const VoicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VoicesApiFp(configuration)
    return {
        /**
         * Add a new voice to your collection of voices in VoiceLab.
         * @summary Add Voice
         * @param {VoicesApiAddVoiceV1VoicesAddPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVoiceV1VoicesAddPost(requestParameters: VoicesApiAddVoiceV1VoicesAddPostRequest, options?: AxiosRequestConfig): AxiosPromise<AddVoiceResponseModel> {
            return localVarFp.addVoiceV1VoicesAddPost(requestParameters.name, requestParameters.files, requestParameters.xiApiKey, requestParameters.description, requestParameters.labels, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a voice by its ID.
         * @summary Delete Voice
         * @param {VoicesApiDeleteVoiceV1VoicesVoiceIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVoiceV1VoicesVoiceIdDelete(requestParameters: VoicesApiDeleteVoiceV1VoicesVoiceIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteVoiceV1VoicesVoiceIdDelete(requestParameters.voiceId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit your settings for a specific voice. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Edit Voice Settings
         * @param {VoicesApiEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editVoiceSettingsV1VoicesVoiceIdSettingsEditPost(requestParameters: VoicesApiEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.editVoiceSettingsV1VoicesVoiceIdSettingsEditPost(requestParameters.voiceId, requestParameters.uNKNOWNBASETYPE, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit a voice created by you.
         * @summary Edit Voice
         * @param {VoicesApiEditVoiceV1VoicesVoiceIdEditPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editVoiceV1VoicesVoiceIdEditPost(requestParameters: VoicesApiEditVoiceV1VoicesVoiceIdEditPostRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.editVoiceV1VoicesVoiceIdEditPost(requestParameters.voiceId, requestParameters.name, requestParameters.xiApiKey, requestParameters.files, requestParameters.description, requestParameters.labels, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the default settings for voices. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Get Default Voice Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultVoiceSettingsV1VoicesSettingsDefaultGet(options?: AxiosRequestConfig): AxiosPromise<VoiceSettingsResponseModel> {
            return localVarFp.getDefaultVoiceSettingsV1VoicesSettingsDefaultGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the settings for a specific voice. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
         * @summary Get Voice Settings
         * @param {VoicesApiGetVoiceSettingsV1VoicesVoiceIdSettingsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoiceSettingsV1VoicesVoiceIdSettingsGet(requestParameters: VoicesApiGetVoiceSettingsV1VoicesVoiceIdSettingsGetRequest, options?: AxiosRequestConfig): AxiosPromise<VoiceSettingsResponseModel> {
            return localVarFp.getVoiceSettingsV1VoicesVoiceIdSettingsGet(requestParameters.voiceId, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns metadata about a specific voice.
         * @summary Get Voice
         * @param {VoicesApiGetVoiceV1VoicesVoiceIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoiceV1VoicesVoiceIdGet(requestParameters: VoicesApiGetVoiceV1VoicesVoiceIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<VoiceResponseModel> {
            return localVarFp.getVoiceV1VoicesVoiceIdGet(requestParameters.voiceId, requestParameters.withSettings, requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of all available voices for a user.
         * @summary Get Voices
         * @param {VoicesApiGetVoicesV1VoicesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoicesV1VoicesGet(requestParameters: VoicesApiGetVoicesV1VoicesGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetVoicesResponseModel> {
            return localVarFp.getVoicesV1VoicesGet(requestParameters.xiApiKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addVoiceV1VoicesAddPost operation in VoicesApi.
 * @export
 * @interface VoicesApiAddVoiceV1VoicesAddPostRequest
 */
export interface VoicesApiAddVoiceV1VoicesAddPostRequest {
    /**
     * The name that identifies this voice. This will be displayed in the dropdown of the website.
     * @type {string}
     * @memberof VoicesApiAddVoiceV1VoicesAddPost
     */
    readonly name: string

    /**
     * One or more audio files to clone the voice from
     * @type {Array<File>}
     * @memberof VoicesApiAddVoiceV1VoicesAddPost
     */
    readonly files: Array<File>

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof VoicesApiAddVoiceV1VoicesAddPost
     */
    readonly xiApiKey?: string

    /**
     * How would you describe the voice?
     * @type {string}
     * @memberof VoicesApiAddVoiceV1VoicesAddPost
     */
    readonly description?: string

    /**
     * Serialized labels dictionary for the voice.
     * @type {string}
     * @memberof VoicesApiAddVoiceV1VoicesAddPost
     */
    readonly labels?: string
}

/**
 * Request parameters for deleteVoiceV1VoicesVoiceIdDelete operation in VoicesApi.
 * @export
 * @interface VoicesApiDeleteVoiceV1VoicesVoiceIdDeleteRequest
 */
export interface VoicesApiDeleteVoiceV1VoicesVoiceIdDeleteRequest {
    /**
     * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
     * @type {string}
     * @memberof VoicesApiDeleteVoiceV1VoicesVoiceIdDelete
     */
    readonly voiceId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof VoicesApiDeleteVoiceV1VoicesVoiceIdDelete
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for editVoiceSettingsV1VoicesVoiceIdSettingsEditPost operation in VoicesApi.
 * @export
 * @interface VoicesApiEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostRequest
 */
export interface VoicesApiEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostRequest {
    /**
     * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
     * @type {string}
     * @memberof VoicesApiEditVoiceSettingsV1VoicesVoiceIdSettingsEditPost
     */
    readonly voiceId: string

    /**
     * 
     * @type {UNKNOWN_BASE_TYPE}
     * @memberof VoicesApiEditVoiceSettingsV1VoicesVoiceIdSettingsEditPost
     */
    readonly uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof VoicesApiEditVoiceSettingsV1VoicesVoiceIdSettingsEditPost
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for editVoiceV1VoicesVoiceIdEditPost operation in VoicesApi.
 * @export
 * @interface VoicesApiEditVoiceV1VoicesVoiceIdEditPostRequest
 */
export interface VoicesApiEditVoiceV1VoicesVoiceIdEditPostRequest {
    /**
     * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
     * @type {string}
     * @memberof VoicesApiEditVoiceV1VoicesVoiceIdEditPost
     */
    readonly voiceId: string

    /**
     * The name that identifies this voice. This will be displayed in the dropdown of the website.
     * @type {string}
     * @memberof VoicesApiEditVoiceV1VoicesVoiceIdEditPost
     */
    readonly name: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof VoicesApiEditVoiceV1VoicesVoiceIdEditPost
     */
    readonly xiApiKey?: string

    /**
     * Audio files to add to the voice
     * @type {Array<File>}
     * @memberof VoicesApiEditVoiceV1VoicesVoiceIdEditPost
     */
    readonly files?: Array<File>

    /**
     * How would you describe the voice?
     * @type {string}
     * @memberof VoicesApiEditVoiceV1VoicesVoiceIdEditPost
     */
    readonly description?: string

    /**
     * Serialized labels dictionary for the voice.
     * @type {string}
     * @memberof VoicesApiEditVoiceV1VoicesVoiceIdEditPost
     */
    readonly labels?: string
}

/**
 * Request parameters for getVoiceSettingsV1VoicesVoiceIdSettingsGet operation in VoicesApi.
 * @export
 * @interface VoicesApiGetVoiceSettingsV1VoicesVoiceIdSettingsGetRequest
 */
export interface VoicesApiGetVoiceSettingsV1VoicesVoiceIdSettingsGetRequest {
    /**
     * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
     * @type {string}
     * @memberof VoicesApiGetVoiceSettingsV1VoicesVoiceIdSettingsGet
     */
    readonly voiceId: string

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof VoicesApiGetVoiceSettingsV1VoicesVoiceIdSettingsGet
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for getVoiceV1VoicesVoiceIdGet operation in VoicesApi.
 * @export
 * @interface VoicesApiGetVoiceV1VoicesVoiceIdGetRequest
 */
export interface VoicesApiGetVoiceV1VoicesVoiceIdGetRequest {
    /**
     * Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.
     * @type {string}
     * @memberof VoicesApiGetVoiceV1VoicesVoiceIdGet
     */
    readonly voiceId: string

    /**
     * If set will return settings information corresponding to the voice, requires authorization.
     * @type {boolean}
     * @memberof VoicesApiGetVoiceV1VoicesVoiceIdGet
     */
    readonly withSettings?: boolean

    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof VoicesApiGetVoiceV1VoicesVoiceIdGet
     */
    readonly xiApiKey?: string
}

/**
 * Request parameters for getVoicesV1VoicesGet operation in VoicesApi.
 * @export
 * @interface VoicesApiGetVoicesV1VoicesGetRequest
 */
export interface VoicesApiGetVoicesV1VoicesGetRequest {
    /**
     * Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the \&#39;Profile\&#39; tab on the website.
     * @type {string}
     * @memberof VoicesApiGetVoicesV1VoicesGet
     */
    readonly xiApiKey?: string
}

/**
 * VoicesApi - object-oriented interface
 * @export
 * @class VoicesApi
 * @extends {BaseAPI}
 */
export class VoicesApi extends BaseAPI {
    /**
     * Add a new voice to your collection of voices in VoiceLab.
     * @summary Add Voice
     * @param {VoicesApiAddVoiceV1VoicesAddPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApi
     */
    public addVoiceV1VoicesAddPost(requestParameters: VoicesApiAddVoiceV1VoicesAddPostRequest, options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).addVoiceV1VoicesAddPost(requestParameters.name, requestParameters.files, requestParameters.xiApiKey, requestParameters.description, requestParameters.labels, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a voice by its ID.
     * @summary Delete Voice
     * @param {VoicesApiDeleteVoiceV1VoicesVoiceIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApi
     */
    public deleteVoiceV1VoicesVoiceIdDelete(requestParameters: VoicesApiDeleteVoiceV1VoicesVoiceIdDeleteRequest, options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).deleteVoiceV1VoicesVoiceIdDelete(requestParameters.voiceId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit your settings for a specific voice. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
     * @summary Edit Voice Settings
     * @param {VoicesApiEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApi
     */
    public editVoiceSettingsV1VoicesVoiceIdSettingsEditPost(requestParameters: VoicesApiEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostRequest, options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).editVoiceSettingsV1VoicesVoiceIdSettingsEditPost(requestParameters.voiceId, requestParameters.uNKNOWNBASETYPE, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit a voice created by you.
     * @summary Edit Voice
     * @param {VoicesApiEditVoiceV1VoicesVoiceIdEditPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApi
     */
    public editVoiceV1VoicesVoiceIdEditPost(requestParameters: VoicesApiEditVoiceV1VoicesVoiceIdEditPostRequest, options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).editVoiceV1VoicesVoiceIdEditPost(requestParameters.voiceId, requestParameters.name, requestParameters.xiApiKey, requestParameters.files, requestParameters.description, requestParameters.labels, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the default settings for voices. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
     * @summary Get Default Voice Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApi
     */
    public getDefaultVoiceSettingsV1VoicesSettingsDefaultGet(options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).getDefaultVoiceSettingsV1VoicesSettingsDefaultGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the settings for a specific voice. \"similarity_boost\" corresponds to\"Clarity + Similarity Enhancement\" in the web app and \"stability\" corresponds to \"Stability\" slider in the web app.
     * @summary Get Voice Settings
     * @param {VoicesApiGetVoiceSettingsV1VoicesVoiceIdSettingsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApi
     */
    public getVoiceSettingsV1VoicesVoiceIdSettingsGet(requestParameters: VoicesApiGetVoiceSettingsV1VoicesVoiceIdSettingsGetRequest, options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).getVoiceSettingsV1VoicesVoiceIdSettingsGet(requestParameters.voiceId, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns metadata about a specific voice.
     * @summary Get Voice
     * @param {VoicesApiGetVoiceV1VoicesVoiceIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApi
     */
    public getVoiceV1VoicesVoiceIdGet(requestParameters: VoicesApiGetVoiceV1VoicesVoiceIdGetRequest, options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).getVoiceV1VoicesVoiceIdGet(requestParameters.voiceId, requestParameters.withSettings, requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of all available voices for a user.
     * @summary Get Voices
     * @param {VoicesApiGetVoicesV1VoicesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoicesApi
     */
    public getVoicesV1VoicesGet(requestParameters: VoicesApiGetVoicesV1VoicesGetRequest = {}, options?: AxiosRequestConfig) {
        return VoicesApiFp(this.configuration).getVoicesV1VoicesGet(requestParameters.xiApiKey, options).then((request) => request(this.axios, this.basePath));
    }
}





type UNKNOWN_BASE_TYPE = any;
